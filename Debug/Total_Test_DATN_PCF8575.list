
Total_Test_DATN_PCF8575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005dac  08005dac  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dac  08005dac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002124  20000018  08005dcc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000213c  08005dcc  0002213c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b55f  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfe  00000000  00000000  0002b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017207  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce22  00000000  00000000  00045877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841e2  00000000  00000000  00052699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d687b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  000d68cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d60 	.word	0x08005d60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08005d60 	.word	0x08005d60

0800014c <build_crc16_table>:
#include"CRC.h"

void build_crc16_table()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 256; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]
 8000156:	e02d      	b.n	80001b4 <build_crc16_table+0x68>
		uint16_t ch = i;
 8000158:	88fb      	ldrh	r3, [r7, #6]
 800015a:	80bb      	strh	r3, [r7, #4]
		uint16_t crc = 0;
 800015c:	2300      	movs	r3, #0
 800015e:	807b      	strh	r3, [r7, #2]
		for (uint8_t j = 0; j < 8; j++) {
 8000160:	2300      	movs	r3, #0
 8000162:	707b      	strb	r3, [r7, #1]
 8000164:	e01b      	b.n	800019e <build_crc16_table+0x52>
			uint8_t b = (ch ^ crc) & 0x01;
 8000166:	88bb      	ldrh	r3, [r7, #4]
 8000168:	b2da      	uxtb	r2, r3
 800016a:	887b      	ldrh	r3, [r7, #2]
 800016c:	b2db      	uxtb	r3, r3
 800016e:	4053      	eors	r3, r2
 8000170:	b2db      	uxtb	r3, r3
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	703b      	strb	r3, [r7, #0]
			crc >>= 1;
 8000178:	887b      	ldrh	r3, [r7, #2]
 800017a:	085b      	lsrs	r3, r3, #1
 800017c:	807b      	strh	r3, [r7, #2]
			if (b)
 800017e:	783b      	ldrb	r3, [r7, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d006      	beq.n	8000192 <build_crc16_table+0x46>
				crc = crc ^ 0xA001;
 8000184:	887b      	ldrh	r3, [r7, #2]
 8000186:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800018a:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 800018e:	43db      	mvns	r3, r3
 8000190:	807b      	strh	r3, [r7, #2]
			ch >>= 1;
 8000192:	88bb      	ldrh	r3, [r7, #4]
 8000194:	085b      	lsrs	r3, r3, #1
 8000196:	80bb      	strh	r3, [r7, #4]
		for (uint8_t j = 0; j < 8; j++) {
 8000198:	787b      	ldrb	r3, [r7, #1]
 800019a:	3301      	adds	r3, #1
 800019c:	707b      	strb	r3, [r7, #1]
 800019e:	787b      	ldrb	r3, [r7, #1]
 80001a0:	2b07      	cmp	r3, #7
 80001a2:	d9e0      	bls.n	8000166 <build_crc16_table+0x1a>
		}
		crc16_table[i] = crc;
 80001a4:	88fb      	ldrh	r3, [r7, #6]
 80001a6:	4908      	ldr	r1, [pc, #32]	; (80001c8 <build_crc16_table+0x7c>)
 80001a8:	887a      	ldrh	r2, [r7, #2]
 80001aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (uint16_t i = 0; i < 256; i++) {
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	3301      	adds	r3, #1
 80001b2:	80fb      	strh	r3, [r7, #6]
 80001b4:	88fb      	ldrh	r3, [r7, #6]
 80001b6:	2bff      	cmp	r3, #255	; 0xff
 80001b8:	d9ce      	bls.n	8000158 <build_crc16_table+0xc>
	}
}
 80001ba:	bf00      	nop
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000034 	.word	0x20000034

080001cc <CRC16>:

uint16_t CRC16(uint8_t* input, int size)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 80001d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001da:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < size; i++) {
 80001dc:	2300      	movs	r3, #0
 80001de:	737b      	strb	r3, [r7, #13]
 80001e0:	e017      	b.n	8000212 <CRC16+0x46>
		uint8_t ch = input[i];
 80001e2:	7b7b      	ldrb	r3, [r7, #13]
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	4413      	add	r3, r2
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	733b      	strb	r3, [r7, #12]
		uint16_t t = (ch ^ crc) & 0xFF;
 80001ec:	7b3b      	ldrb	r3, [r7, #12]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	4053      	eors	r3, r2
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	817b      	strh	r3, [r7, #10]
		crc = (crc >> 8) ^ crc16_table[t];
 80001fa:	89fb      	ldrh	r3, [r7, #14]
 80001fc:	0a1b      	lsrs	r3, r3, #8
 80001fe:	b29a      	uxth	r2, r3
 8000200:	897b      	ldrh	r3, [r7, #10]
 8000202:	490a      	ldr	r1, [pc, #40]	; (800022c <CRC16+0x60>)
 8000204:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000208:	4053      	eors	r3, r2
 800020a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < size; i++) {
 800020c:	7b7b      	ldrb	r3, [r7, #13]
 800020e:	3301      	adds	r3, #1
 8000210:	737b      	strb	r3, [r7, #13]
 8000212:	7b7b      	ldrb	r3, [r7, #13]
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	dce3      	bgt.n	80001e2 <CRC16+0x16>
	}
	return ~crc;
 800021a:	89fb      	ldrh	r3, [r7, #14]
 800021c:	43db      	mvns	r3, r3
 800021e:	b29b      	uxth	r3, r3
}
 8000220:	4618      	mov	r0, r3
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000034 	.word	0x20000034

08000230 <CRC16_Modbus>:


uint16_t CRC16_Modbus(uint8_t* input, int size)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 800023a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800023e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < size; i++) {
 8000240:	2300      	movs	r3, #0
 8000242:	737b      	strb	r3, [r7, #13]
 8000244:	e017      	b.n	8000276 <CRC16_Modbus+0x46>
		uint8_t ch = input[i];
 8000246:	7b7b      	ldrb	r3, [r7, #13]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	733b      	strb	r3, [r7, #12]
		uint16_t t = (ch ^ crc) & 0xFF;
 8000250:	7b3b      	ldrb	r3, [r7, #12]
 8000252:	b29a      	uxth	r2, r3
 8000254:	89fb      	ldrh	r3, [r7, #14]
 8000256:	4053      	eors	r3, r2
 8000258:	b29b      	uxth	r3, r3
 800025a:	b2db      	uxtb	r3, r3
 800025c:	817b      	strh	r3, [r7, #10]
		crc = (crc >> 8) ^ crc16_table[t];
 800025e:	89fb      	ldrh	r3, [r7, #14]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	b29a      	uxth	r2, r3
 8000264:	897b      	ldrh	r3, [r7, #10]
 8000266:	4909      	ldr	r1, [pc, #36]	; (800028c <CRC16_Modbus+0x5c>)
 8000268:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800026c:	4053      	eors	r3, r2
 800026e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < size; i++) {
 8000270:	7b7b      	ldrb	r3, [r7, #13]
 8000272:	3301      	adds	r3, #1
 8000274:	737b      	strb	r3, [r7, #13]
 8000276:	7b7b      	ldrb	r3, [r7, #13]
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	dce3      	bgt.n	8000246 <CRC16_Modbus+0x16>
	}
	return crc;
 800027e:	89fb      	ldrh	r3, [r7, #14]
}
 8000280:	4618      	mov	r0, r3
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	20000034 	.word	0x20000034

08000290 <HAL_UARTEx_RxEventCallback>:
#include "func.h"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2d      	ldr	r2, [pc, #180]	; (8000358 <HAL_UARTEx_RxEventCallback+0xc8>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d135      	bne.n	8000312 <HAL_UARTEx_RxEventCallback+0x82>
		if(Size >= 50){
 80002a6:	887b      	ldrh	r3, [r7, #2]
 80002a8:	2b31      	cmp	r3, #49	; 0x31
 80002aa:	d901      	bls.n	80002b0 <HAL_UARTEx_RxEventCallback+0x20>
			Size = 50;
 80002ac:	2332      	movs	r3, #50	; 0x32
 80002ae:	807b      	strh	r3, [r7, #2]
		}

		memcpy(&uartReciver_Store[uartReciver_Store_Size][0],uartReciver_buffer,Size);
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <HAL_UARTEx_RxEventCallback+0xcc>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	2332      	movs	r3, #50	; 0x32
 80002b8:	fb02 f303 	mul.w	r3, r2, r3
 80002bc:	4a28      	ldr	r2, [pc, #160]	; (8000360 <HAL_UARTEx_RxEventCallback+0xd0>)
 80002be:	4413      	add	r3, r2
 80002c0:	887a      	ldrh	r2, [r7, #2]
 80002c2:	4928      	ldr	r1, [pc, #160]	; (8000364 <HAL_UARTEx_RxEventCallback+0xd4>)
 80002c4:	4618      	mov	r0, r3
 80002c6:	f005 fd35 	bl	8005d34 <memcpy>
		uartRecive_Store_Count[uartReciver_Store_Size] = Size;
 80002ca:	4b24      	ldr	r3, [pc, #144]	; (800035c <HAL_UARTEx_RxEventCallback+0xcc>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	b2d9      	uxtb	r1, r3
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <HAL_UARTEx_RxEventCallback+0xd8>)
 80002d6:	5499      	strb	r1, [r3, r2]
		uartReciver_Store_Size++;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <HAL_UARTEx_RxEventCallback+0xcc>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <HAL_UARTEx_RxEventCallback+0xcc>)
 80002e2:	701a      	strb	r2, [r3, #0]

		if(uartReciver_Store_Size >= MAX_SIZE_UARTRECV){
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <HAL_UARTEx_RxEventCallback+0xcc>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d902      	bls.n	80002f2 <HAL_UARTEx_RxEventCallback+0x62>
			uartReciver_Store_Size = MAX_SIZE_UARTRECV - 1;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <HAL_UARTEx_RxEventCallback+0xcc>)
 80002ee:	2204      	movs	r2, #4
 80002f0:	701a      	strb	r2, [r3, #0]
		}

		flag_uart = 1;
 80002f2:	4b1e      	ldr	r3, [pc, #120]	; (800036c <HAL_UARTEx_RxEventCallback+0xdc>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uartReciver_buffer, UARTRX_BUFF_SIZE);
 80002f8:	2232      	movs	r2, #50	; 0x32
 80002fa:	491a      	ldr	r1, [pc, #104]	; (8000364 <HAL_UARTEx_RxEventCallback+0xd4>)
 80002fc:	481c      	ldr	r0, [pc, #112]	; (8000370 <HAL_UARTEx_RxEventCallback+0xe0>)
 80002fe:	f004 ff4d 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <HAL_UARTEx_RxEventCallback+0xe4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f022 0204 	bic.w	r2, r2, #4
 8000310:	601a      	str	r2, [r3, #0]

	}
#ifdef DMA
	if(huart->Instance == USART2)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a18      	ldr	r2, [pc, #96]	; (8000378 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d118      	bne.n	800034e <HAL_UARTEx_RxEventCallback+0xbe>
	{
		Reciver_rs485_Count = Size;
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <HAL_UARTEx_RxEventCallback+0xec>)
 8000322:	701a      	strb	r2, [r3, #0]
		flag_rs485_rx = 1;
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Tx_Rx_EN_GPIO_Port, Tx_Rx_EN_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2110      	movs	r1, #16
 800032e:	4815      	ldr	r0, [pc, #84]	; (8000384 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000330:	f003 f88a 	bl	8003448 <HAL_GPIO_WritePin>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartReciver_rs485, 30);
 8000334:	221e      	movs	r2, #30
 8000336:	4914      	ldr	r1, [pc, #80]	; (8000388 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000338:	4814      	ldr	r0, [pc, #80]	; (800038c <HAL_UARTEx_RxEventCallback+0xfc>)
 800033a:	f004 ff2f 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <HAL_UARTEx_RxEventCallback+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <HAL_UARTEx_RxEventCallback+0x100>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f022 0204 	bic.w	r2, r2, #4
 800034c:	601a      	str	r2, [r3, #0]
	}
#endif

}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40013800 	.word	0x40013800
 800035c:	20000e6d 	.word	0x20000e6d
 8000360:	20000d6c 	.word	0x20000d6c
 8000364:	20000d38 	.word	0x20000d38
 8000368:	20000e68 	.word	0x20000e68
 800036c:	20000e6e 	.word	0x20000e6e
 8000370:	20001fa0 	.word	0x20001fa0
 8000374:	2000206c 	.word	0x2000206c
 8000378:	40004400 	.word	0x40004400
 800037c:	20001e80 	.word	0x20001e80
 8000380:	20001e7e 	.word	0x20001e7e
 8000384:	40010800 	.word	0x40010800
 8000388:	20001e84 	.word	0x20001e84
 800038c:	20001fe4 	.word	0x20001fe4
 8000390:	200020b0 	.word	0x200020b0

08000394 <Serial_Process>:

void Serial_Process(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < uartReciver_Store_Size ; i++){
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	e010      	b.n	80003c2 <Serial_Process+0x2e>
		Uart_Package_Process(&uartReciver_Store[i][0],uartRecive_Store_Count[i]);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2232      	movs	r2, #50	; 0x32
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <Serial_Process+0x58>)
 80003aa:	441a      	add	r2, r3
 80003ac:	4910      	ldr	r1, [pc, #64]	; (80003f0 <Serial_Process+0x5c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	440b      	add	r3, r1
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4610      	mov	r0, r2
 80003b8:	f000 f81e 	bl	80003f8 <Uart_Package_Process>
	for(int i = 0 ; i < uartReciver_Store_Size ; i++){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3301      	adds	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <Serial_Process+0x60>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4293      	cmp	r3, r2
 80003cc:	dbe8      	blt.n	80003a0 <Serial_Process+0xc>
	}
	memset(uartRecive_Store_Count,0,uartReciver_Store_Size);
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <Serial_Process+0x60>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	461a      	mov	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	4806      	ldr	r0, [pc, #24]	; (80003f0 <Serial_Process+0x5c>)
 80003d8:	f005 fcba 	bl	8005d50 <memset>
	uartReciver_Store_Size = 0;
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <Serial_Process+0x60>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]

}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000d6c 	.word	0x20000d6c
 80003f0:	20000e68 	.word	0x20000e68
 80003f4:	20000e6d 	.word	0x20000e6d

080003f8 <Uart_Package_Process>:

void Uart_Package_Process(uint8_t* uartPackage , uint8_t uartPackageCout)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	70fb      	strb	r3, [r7, #3]
		uint16_t crc_payload = uartPackage[uartPackageCout-1];
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	3b01      	subs	r3, #1
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	81fb      	strh	r3, [r7, #14]
		crc_payload <<= 8;
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	81fb      	strh	r3, [r7, #14]
		crc_payload |= uartPackage[uartPackageCout-2];
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	3b02      	subs	r3, #2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	b29a      	uxth	r2, r3
 8000422:	89fb      	ldrh	r3, [r7, #14]
 8000424:	4313      	orrs	r3, r2
 8000426:	81fb      	strh	r3, [r7, #14]

		uint16_t crc_check = CRC16(uartPackage, uartPackageCout-2);
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	3b02      	subs	r3, #2
 800042c:	4619      	mov	r1, r3
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f7ff fecc 	bl	80001cc <CRC16>
 8000434:	4603      	mov	r3, r0
 8000436:	81bb      	strh	r3, [r7, #12]

		if((crc_payload == crc_check) && (uartPackageCout > 2)){
 8000438:	89fa      	ldrh	r2, [r7, #14]
 800043a:	89bb      	ldrh	r3, [r7, #12]
 800043c:	429a      	cmp	r2, r3
 800043e:	d11b      	bne.n	8000478 <Uart_Package_Process+0x80>
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d918      	bls.n	8000478 <Uart_Package_Process+0x80>
			memcpy(&UART_DATA[Size_UART_DATA][0],uartPackage,uartPackageCout);
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <Uart_Package_Process+0x88>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	461a      	mov	r2, r3
 800044c:	2332      	movs	r3, #50	; 0x32
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <Uart_Package_Process+0x8c>)
 8000454:	4413      	add	r3, r2
 8000456:	78fa      	ldrb	r2, [r7, #3]
 8000458:	6879      	ldr	r1, [r7, #4]
 800045a:	4618      	mov	r0, r3
 800045c:	f005 fc6a 	bl	8005d34 <memcpy>
			Count_UART_DATA[Size_UART_DATA] = uartPackageCout;
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <Uart_Package_Process+0x88>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <Uart_Package_Process+0x90>)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	5453      	strb	r3, [r2, r1]
			Size_UART_DATA++;
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <Uart_Package_Process+0x88>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b02      	ldr	r3, [pc, #8]	; (8000480 <Uart_Package_Process+0x88>)
 8000476:	701a      	strb	r2, [r3, #0]
		}
}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000d00 	.word	0x20000d00
 8000484:	2000033c 	.word	0x2000033c
 8000488:	20000d04 	.word	0x20000d04

0800048c <loop>:




void loop(void){
 800048c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000490:	b089      	sub	sp, #36	; 0x24
 8000492:	af02      	add	r7, sp, #8

	if((HAL_GetTick() - time_i2c >= time_delay)&&(flag_i2c))
 8000494:	f002 f9be 	bl	8002814 <HAL_GetTick>
 8000498:	4602      	mov	r2, r0
 800049a:	4b95      	ldr	r3, [pc, #596]	; (80006f0 <loop+0x264>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1ad2      	subs	r2, r2, r3
 80004a0:	4b94      	ldr	r3, [pc, #592]	; (80006f4 <loop+0x268>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	f0c0 808c 	bcc.w	80005c2 <loop+0x136>
 80004aa:	4b93      	ldr	r3, [pc, #588]	; (80006f8 <loop+0x26c>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	f000 8087 	beq.w	80005c2 <loop+0x136>
	{
 80004b4:	466b      	mov	r3, sp
 80004b6:	461e      	mov	r6, r3
		uint8_t data_Recvice[data_i2c[data_i2c[2]+1]];
 80004b8:	4b90      	ldr	r3, [pc, #576]	; (80006fc <loop+0x270>)
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3301      	adds	r3, #1
 80004be:	4a8f      	ldr	r2, [pc, #572]	; (80006fc <loop+0x270>)
 80004c0:	5cd1      	ldrb	r1, [r2, r3]
 80004c2:	460b      	mov	r3, r1
 80004c4:	3b01      	subs	r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	b2cb      	uxtb	r3, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	4698      	mov	r8, r3
 80004ce:	4691      	mov	r9, r2
 80004d0:	f04f 0200 	mov.w	r2, #0
 80004d4:	f04f 0300 	mov.w	r3, #0
 80004d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80004dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80004e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80004e4:	b2cb      	uxtb	r3, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	461c      	mov	r4, r3
 80004ea:	4615      	mov	r5, r2
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	00eb      	lsls	r3, r5, #3
 80004f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80004fa:	00e2      	lsls	r2, r4, #3
 80004fc:	460b      	mov	r3, r1
 80004fe:	3307      	adds	r3, #7
 8000500:	08db      	lsrs	r3, r3, #3
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	ebad 0d03 	sub.w	sp, sp, r3
 8000508:	ab02      	add	r3, sp, #8
 800050a:	3300      	adds	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
		HAL_I2C_DeInit(&hi2c2);
 800050e:	487c      	ldr	r0, [pc, #496]	; (8000700 <loop+0x274>)
 8000510:	f003 f8f6 	bl	8003700 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c2);
 8000514:	487a      	ldr	r0, [pc, #488]	; (8000700 <loop+0x274>)
 8000516:	f002 ffaf 	bl	8003478 <HAL_I2C_Init>
		// Khởi tạo giao thức I2C và nhận dữ liệu từ địa chỉ CB
		if(HAL_I2C_Master_Receive(&hi2c2, data_i2c[3]<<1, data_Recvice, data_i2c[data_i2c[2]+1],300) == HAL_OK)
 800051a:	4b78      	ldr	r3, [pc, #480]	; (80006fc <loop+0x270>)
 800051c:	78db      	ldrb	r3, [r3, #3]
 800051e:	b29b      	uxth	r3, r3
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	b299      	uxth	r1, r3
 8000524:	4b75      	ldr	r3, [pc, #468]	; (80006fc <loop+0x270>)
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	3301      	adds	r3, #1
 800052a:	4a74      	ldr	r2, [pc, #464]	; (80006fc <loop+0x270>)
 800052c:	5cd3      	ldrb	r3, [r2, r3]
 800052e:	b29b      	uxth	r3, r3
 8000530:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	4871      	ldr	r0, [pc, #452]	; (8000700 <loop+0x274>)
 800053a:	f003 fa0f 	bl	800395c <HAL_I2C_Master_Receive>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d13a      	bne.n	80005ba <loop+0x12e>
		{
			for(uint8_t i =0;i<2;i++)
 8000544:	2300      	movs	r3, #0
 8000546:	73bb      	strb	r3, [r7, #14]
 8000548:	e008      	b.n	800055c <loop+0xd0>
			 	rx_buffer[i] = data_i2c[i];
 800054a:	7bba      	ldrb	r2, [r7, #14]
 800054c:	7bbb      	ldrb	r3, [r7, #14]
 800054e:	496b      	ldr	r1, [pc, #428]	; (80006fc <loop+0x270>)
 8000550:	5c89      	ldrb	r1, [r1, r2]
 8000552:	4a6c      	ldr	r2, [pc, #432]	; (8000704 <loop+0x278>)
 8000554:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i =0;i<2;i++)
 8000556:	7bbb      	ldrb	r3, [r7, #14]
 8000558:	3301      	adds	r3, #1
 800055a:	73bb      	strb	r3, [r7, #14]
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d9f3      	bls.n	800054a <loop+0xbe>
			rx_buffer[2] = data_i2c[data_i2c[2]+1]+1;//lenght +address
 8000562:	4b66      	ldr	r3, [pc, #408]	; (80006fc <loop+0x270>)
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	3301      	adds	r3, #1
 8000568:	4a64      	ldr	r2, [pc, #400]	; (80006fc <loop+0x270>)
 800056a:	5cd3      	ldrb	r3, [r2, r3]
 800056c:	3301      	adds	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	4b64      	ldr	r3, [pc, #400]	; (8000704 <loop+0x278>)
 8000572:	709a      	strb	r2, [r3, #2]
			rx_buffer[3] = data_i2c[3];
 8000574:	4b61      	ldr	r3, [pc, #388]	; (80006fc <loop+0x270>)
 8000576:	78da      	ldrb	r2, [r3, #3]
 8000578:	4b62      	ldr	r3, [pc, #392]	; (8000704 <loop+0x278>)
 800057a:	70da      	strb	r2, [r3, #3]
			for(uint8_t i =0;i<data_i2c[data_i2c[2+2+data_i2c[2]-3]];i++)
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e009      	b.n	8000596 <loop+0x10a>
				rx_buffer[i+4] = data_Recvice[i];
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3304      	adds	r3, #4
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	5c89      	ldrb	r1, [r1, r2]
 800058c:	4a5d      	ldr	r2, [pc, #372]	; (8000704 <loop+0x278>)
 800058e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i =0;i<data_i2c[data_i2c[2+2+data_i2c[2]-3]];i++)
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	3301      	adds	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <loop+0x270>)
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	3301      	adds	r3, #1
 800059c:	4a57      	ldr	r2, [pc, #348]	; (80006fc <loop+0x270>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b56      	ldr	r3, [pc, #344]	; (80006fc <loop+0x270>)
 80005a4:	5c9b      	ldrb	r3, [r3, r2]
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3ea      	bcc.n	8000582 <loop+0xf6>
			tx_crc(rx_buffer[2]+3);
 80005ac:	4b55      	ldr	r3, [pc, #340]	; (8000704 <loop+0x278>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	3303      	adds	r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fb1f 	bl	8001bf8 <tx_crc>

		}
		flag_i2c = 0;
 80005ba:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <loop+0x26c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	46b5      	mov	sp, r6
	}

	  if((HAL_GetTick() - digital_read_timer > 200) && (sizeDATA_toggle > 0)){
 80005c2:	f002 f927 	bl	8002814 <HAL_GetTick>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b4f      	ldr	r3, [pc, #316]	; (8000708 <loop+0x27c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	2bc8      	cmp	r3, #200	; 0xc8
 80005d0:	d90a      	bls.n	80005e8 <loop+0x15c>
 80005d2:	4b4e      	ldr	r3, [pc, #312]	; (800070c <loop+0x280>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <loop+0x15c>
		  read_input_digital();
 80005da:	f000 fa59 	bl	8000a90 <read_input_digital>
		  digital_read_timer = HAL_GetTick();
 80005de:	f002 f919 	bl	8002814 <HAL_GetTick>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a48      	ldr	r2, [pc, #288]	; (8000708 <loop+0x27c>)
 80005e6:	6013      	str	r3, [r2, #0]
	  }

	  if(HAL_GetTick() - adc_read_timer > 500){
 80005e8:	f002 f914 	bl	8002814 <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b48      	ldr	r3, [pc, #288]	; (8000710 <loop+0x284>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005f8:	d906      	bls.n	8000608 <loop+0x17c>
		  get_data_adc();
 80005fa:	f000 fedb 	bl	80013b4 <get_data_adc>
		  adc_read_timer = HAL_GetTick();
 80005fe:	f002 f909 	bl	8002814 <HAL_GetTick>
 8000602:	4603      	mov	r3, r0
 8000604:	4a42      	ldr	r2, [pc, #264]	; (8000710 <loop+0x284>)
 8000606:	6013      	str	r3, [r2, #0]
	  }

	  if(sizeDATA > 0)
 8000608:	4b42      	ldr	r3, [pc, #264]	; (8000714 <loop+0x288>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d03a      	beq.n	8000686 <loop+0x1fa>
	  {
#ifdef IWG
		  MX_IWDG_Init();
#endif
		  for(int i=0;i < sizeDATA;i++)
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	e031      	b.n	800067a <loop+0x1ee>
		  {
#ifdef POLLING
			  if((HAL_GetTick() - real_time[i] >= Timer[i]) && (!flag_i2c))
#endif
#ifdef DMA
			  if((HAL_GetTick() - real_time[i] >= Timer[i]) && (!flag_i2c)&&(!flag_rs485)&&(!flag_rs485_rx))
 8000616:	f002 f8fd 	bl	8002814 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	493e      	ldr	r1, [pc, #248]	; (8000718 <loop+0x28c>)
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	493d      	ldr	r1, [pc, #244]	; (800071c <loop+0x290>)
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800062e:	4293      	cmp	r3, r2
 8000630:	d320      	bcc.n	8000674 <loop+0x1e8>
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <loop+0x26c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d11c      	bne.n	8000674 <loop+0x1e8>
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <loop+0x294>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d118      	bne.n	8000674 <loop+0x1e8>
 8000642:	4b38      	ldr	r3, [pc, #224]	; (8000724 <loop+0x298>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d114      	bne.n	8000674 <loop+0x1e8>
#endif
			  {
				  function(&DATA[i][0],countDATA[i]);
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	2232      	movs	r2, #50	; 0x32
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <loop+0x29c>)
 8000654:	441a      	add	r2, r3
 8000656:	4935      	ldr	r1, [pc, #212]	; (800072c <loop+0x2a0>)
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	440b      	add	r3, r1
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f000 f8c7 	bl	80007f4 <function>
				  real_time[i] = HAL_GetTick();
 8000666:	f002 f8d5 	bl	8002814 <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	492a      	ldr	r1, [pc, #168]	; (8000718 <loop+0x28c>)
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i=0;i < sizeDATA;i++)
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	3301      	adds	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <loop+0x288>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4293      	cmp	r3, r2
 8000684:	dbc7      	blt.n	8000616 <loop+0x18a>
			  }

		  }
	  }

	  if(flag_send_uart && (HAL_GetTick() - time_send_uart > 10))
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <loop+0x2a4>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d022      	beq.n	80006d4 <loop+0x248>
 800068e:	f002 f8c1 	bl	8002814 <HAL_GetTick>
 8000692:	4602      	mov	r2, r0
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <loop+0x2a8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	2b0a      	cmp	r3, #10
 800069c:	d91a      	bls.n	80006d4 <loop+0x248>
	  {
		flag_send_uart = 0;
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <loop+0x2a4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
		uint8_t uart_error;
		uart_error = HAL_UART_Transmit_DMA(&huart1, &uartSend_Store[0][0], uartSend_Store_Count[0]);
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <loop+0x2ac>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4923      	ldr	r1, [pc, #140]	; (800073c <loop+0x2b0>)
 80006ae:	4824      	ldr	r0, [pc, #144]	; (8000740 <loop+0x2b4>)
 80006b0:	f004 fd08 	bl	80050c4 <HAL_UART_Transmit_DMA>
 80006b4:	4603      	mov	r3, r0
 80006b6:	70fb      	strb	r3, [r7, #3]
		if((uart_error == HAL_BUSY) || (uart_error == HAL_ERROR)){
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d002      	beq.n	80006c4 <loop+0x238>
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d107      	bne.n	80006d4 <loop+0x248>
			flag_send_uart =1;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <loop+0x2a4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
			time_send_uart = HAL_GetTick();
 80006ca:	f002 f8a3 	bl	8002814 <HAL_GetTick>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a18      	ldr	r2, [pc, #96]	; (8000734 <loop+0x2a8>)
 80006d2:	6013      	str	r3, [r2, #0]
		}
	  }



	  if(Size_UART_DATA > 0)
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <loop+0x2b8>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d063      	beq.n	80007a4 <loop+0x318>
	  {
		  function(&UART_DATA[0][0],Count_UART_DATA[0]);
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <loop+0x2bc>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <loop+0x2c0>)
 80006e4:	f000 f886 	bl	80007f4 <function>
		  for(int i=0;i<Size_UART_DATA;i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e047      	b.n	800077e <loop+0x2f2>
 80006ee:	bf00      	nop
 80006f0:	20000e70 	.word	0x20000e70
 80006f4:	20000e78 	.word	0x20000e78
 80006f8:	20000e74 	.word	0x20000e74
 80006fc:	20000e7c 	.word	0x20000e7c
 8000700:	20001f4c 	.word	0x20001f4c
 8000704:	20000e9c 	.word	0x20000e9c
 8000708:	20001e74 	.word	0x20001e74
 800070c:	20001e5c 	.word	0x20001e5c
 8000710:	20001e78 	.word	0x20001e78
 8000714:	20001894 	.word	0x20001894
 8000718:	20001998 	.word	0x20001998
 800071c:	200018cc 	.word	0x200018cc
 8000720:	20001e7d 	.word	0x20001e7d
 8000724:	20001e7e 	.word	0x20001e7e
 8000728:	20000ed0 	.word	0x20000ed0
 800072c:	20001898 	.word	0x20001898
 8000730:	20000336 	.word	0x20000336
 8000734:	20000338 	.word	0x20000338
 8000738:	20000330 	.word	0x20000330
 800073c:	20000234 	.word	0x20000234
 8000740:	20001fa0 	.word	0x20001fa0
 8000744:	20000d00 	.word	0x20000d00
 8000748:	20000d04 	.word	0x20000d04
 800074c:	2000033c 	.word	0x2000033c
		  {
			  memcpy(&UART_DATA[i][0],&UART_DATA[i+1][0],Count_UART_DATA[i+1]);
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2232      	movs	r2, #50	; 0x32
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <loop+0x348>)
 800075a:	1898      	adds	r0, r3, r2
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	3301      	adds	r3, #1
 8000760:	2232      	movs	r2, #50	; 0x32
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <loop+0x348>)
 8000768:	1899      	adds	r1, r3, r2
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <loop+0x34c>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	461a      	mov	r2, r3
 8000774:	f005 fade 	bl	8005d34 <memcpy>
		  for(int i=0;i<Size_UART_DATA;i++)
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <loop+0x350>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4293      	cmp	r3, r2
 8000788:	dbe2      	blt.n	8000750 <loop+0x2c4>
		  }
		  memcpy(&Count_UART_DATA[0],&Count_UART_DATA[1],Size_UART_DATA);
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <loop+0x350>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	4913      	ldr	r1, [pc, #76]	; (80007e0 <loop+0x354>)
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <loop+0x34c>)
 8000794:	f005 face 	bl	8005d34 <memcpy>
		  Size_UART_DATA--;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <loop+0x350>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <loop+0x350>)
 80007a2:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_uart)
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <loop+0x358>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <loop+0x32a>
	  {
		  Serial_Process();
 80007ac:	f7ff fdf2 	bl	8000394 <Serial_Process>
		  flag_uart = 0;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <loop+0x358>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag_rs485_rx)
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <loop+0x35c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <loop+0x33e>
	  {
		  rs485(uartReciver_rs485,Reciver_rs485_Count);
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <loop+0x360>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <loop+0x364>)
 80007c6:	f000 ff93 	bl	80016f0 <rs485>
	  }



}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007d4:	2000033c 	.word	0x2000033c
 80007d8:	20000d04 	.word	0x20000d04
 80007dc:	20000d00 	.word	0x20000d00
 80007e0:	20000d05 	.word	0x20000d05
 80007e4:	20000e6e 	.word	0x20000e6e
 80007e8:	20001e7e 	.word	0x20001e7e
 80007ec:	20001e80 	.word	0x20001e80
 80007f0:	20001e84 	.word	0x20001e84

080007f4 <function>:




void function(uint8_t* input , uint8_t size)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
		switch(input[1])
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b0c      	cmp	r3, #12
 8000808:	d858      	bhi.n	80008bc <function+0xc8>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <function+0x1c>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000845 	.word	0x08000845
 8000814:	0800084d 	.word	0x0800084d
 8000818:	08000859 	.word	0x08000859
 800081c:	08000861 	.word	0x08000861
 8000820:	08000869 	.word	0x08000869
 8000824:	08000871 	.word	0x08000871
 8000828:	0800087d 	.word	0x0800087d
 800082c:	08000889 	.word	0x08000889
 8000830:	08000891 	.word	0x08000891
 8000834:	0800089d 	.word	0x0800089d
 8000838:	080008a9 	.word	0x080008a9
 800083c:	080008bd 	.word	0x080008bd
 8000840:	080008b1 	.word	0x080008b1
		{
		case 0:
			read_output_digital(input);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f9dd 	bl	8000c04 <read_output_digital>
			break;
 800084a:	e038      	b.n	80008be <function+0xca>
		case 1:
			read_adc(input,size);
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 fded 	bl	8001430 <read_adc>
			break;
 8000856:	e032      	b.n	80008be <function+0xca>
		case 2 :
			write_digital(input);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f967 	bl	8000b2c <write_digital>
			break;
 800085e:	e02e      	b.n	80008be <function+0xca>
		case 3:
			scan_i2c(input);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 fb69 	bl	8000f38 <scan_i2c>
			break;
 8000866:	e02a      	b.n	80008be <function+0xca>
		case 4:
			write_i2c(input);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 fc33 	bl	80010d4 <write_i2c>
			break;
 800086e:	e026      	b.n	80008be <function+0xca>
		case 5:
			read_i2c(input,size);
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 fad1 	bl	8000e1c <read_i2c>
			break;
 800087a:	e020      	b.n	80008be <function+0xca>
		case 6:
			request_i2c(input,size);
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 fb9d 	bl	8000fc0 <request_i2c>
			break;
 8000886:	e01a      	b.n	80008be <function+0xca>
		case 7:
			check_status(input);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f881 	bl	8000990 <check_status>
			break;
 800088e:	e016      	b.n	80008be <function+0xca>
		case 8:
			read_RS485(input,size);
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	4619      	mov	r1, r3
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 fe25 	bl	80014e4 <read_RS485>
			break;
 800089a:	e010      	b.n	80008be <function+0xca>
		case 9:
			write_to_STM(input,size);
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 fff9 	bl	8001898 <write_to_STM>
			break;
 80008a6:	e00a      	b.n	80008be <function+0xca>
		case 10:
			read_output_digital(input);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f9ab 	bl	8000c04 <read_output_digital>
			break;
 80008ae:	e006      	b.n	80008be <function+0xca>
		case 12:
			logic_or(input,size);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f807 	bl	80008c8 <logic_or>
			break;
 80008ba:	e000      	b.n	80008be <function+0xca>
		default :
			break;
 80008bc:	bf00      	nop
		}
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop

080008c8 <logic_or>:

static void logic_or(uint8_t* input,uint8_t size){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]

	uint8_t input_data = digital_pcf8575(1 - input[3]);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3303      	adds	r3, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f1c3 0301 	rsb	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f8b3 	bl	8000a4c <digital_pcf8575>
 80008e6:	4603      	mov	r3, r0
 80008e8:	72fb      	strb	r3, [r7, #11]
	uint8_t position;
	uint8_t pin_data = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	75fb      	strb	r3, [r7, #23]
//	debug = input_data;
	for(int i = 0; i < input[4] ; i++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	e020      	b.n	8000936 <logic_or+0x6e>
		position  = 0x01;
 80008f4:	2301      	movs	r3, #1
 80008f6:	72bb      	strb	r3, [r7, #10]
		position &= (input_data >> input[5+i])&0x01;
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	3205      	adds	r2, #5
 80008fe:	4611      	mov	r1, r2
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	440a      	add	r2, r1
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	4113      	asrs	r3, r2
 8000908:	b2da      	uxtb	r2, r3
 800090a:	7abb      	ldrb	r3, [r7, #10]
 800090c:	4013      	ands	r3, r2
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	72bb      	strb	r3, [r7, #10]
		pin_data |= (~position);
 8000916:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800091a:	43db      	mvns	r3, r3
 800091c:	b25a      	sxtb	r2, r3
 800091e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000922:	4313      	orrs	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	75fb      	strb	r3, [r7, #23]
		pin_data &= 0x01;
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < input[4] ; i++){
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	3301      	adds	r3, #1
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4293      	cmp	r3, r2
 8000942:	dbd7      	blt.n	80008f4 <logic_or+0x2c>
//		debug = pin_data;
	}
	for(int i = 0; i < input[2] - input[4] -1; i++){
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e011      	b.n	800096e <logic_or+0xa6>
		write_pin_digital(input[input[4]+5+i], pin_data);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	1d5a      	adds	r2, r3, #5
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	7dfa      	ldrb	r2, [r7, #23]
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f9d4 	bl	8000d10 <write_pin_digital>
	for(int i = 0; i < input[2] - input[4] -1; i++){
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3302      	adds	r3, #2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3304      	adds	r3, #4
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	3b01      	subs	r3, #1
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbe1      	blt.n	800094a <logic_or+0x82>
	}

}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <check_status>:



static void check_status(uint8_t* input){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
	if(input[3] == 1 && !connected)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3303      	adds	r3, #3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d122      	bne.n	80009e8 <check_status+0x58>
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <check_status+0x98>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11e      	bne.n	80009e8 <check_status+0x58>
	{
		sizeDATA = 0;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <check_status+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		memset(countDATA,0,50);
 80009b0:	2232      	movs	r2, #50	; 0x32
 80009b2:	2100      	movs	r1, #0
 80009b4:	481e      	ldr	r0, [pc, #120]	; (8000a30 <check_status+0xa0>)
 80009b6:	f005 f9cb 	bl	8005d50 <memset>
		memset(cmd_ID,0,50);
 80009ba:	2232      	movs	r2, #50	; 0x32
 80009bc:	2100      	movs	r1, #0
 80009be:	481d      	ldr	r0, [pc, #116]	; (8000a34 <check_status+0xa4>)
 80009c0:	f005 f9c6 	bl	8005d50 <memset>
		sizeDATA_toggle = 0;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <check_status+0xa8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
		memset(DATA_toggle,0,20*50);
 80009ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ce:	2100      	movs	r1, #0
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <check_status+0xac>)
 80009d2:	f005 f9bd 	bl	8005d50 <memset>
		memset(cmd_ID_toggle,0,50);
 80009d6:	2232      	movs	r2, #50	; 0x32
 80009d8:	2100      	movs	r1, #0
 80009da:	4819      	ldr	r0, [pc, #100]	; (8000a40 <check_status+0xb0>)
 80009dc:	f005 f9b8 	bl	8005d50 <memset>
		connected = true;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <check_status+0x98>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
		data_set[1] = 0xFF;
		HAL_I2C_DeInit(&hi2c1);
		HAL_I2C_Init(&hi2c1);
		HAL_I2C_Master_Transmit(&hi2c1,address_PCF8575<<1,(uint8_t*)data_set,2,30);
	}
}
 80009e6:	e01b      	b.n	8000a20 <check_status+0x90>
	else if(input[3] == 0)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3303      	adds	r3, #3
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d116      	bne.n	8000a20 <check_status+0x90>
		connected = false;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <check_status+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
		data_set[0] = 0xFF;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <check_status+0xb4>)
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	701a      	strb	r2, [r3, #0]
		data_set[1] = 0xFF;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <check_status+0xb4>)
 8000a00:	22ff      	movs	r2, #255	; 0xff
 8000a02:	705a      	strb	r2, [r3, #1]
		HAL_I2C_DeInit(&hi2c1);
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <check_status+0xb8>)
 8000a06:	f002 fe7b 	bl	8003700 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1);
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <check_status+0xb8>)
 8000a0c:	f002 fd34 	bl	8003478 <HAL_I2C_Init>
		HAL_I2C_Master_Transmit(&hi2c1,address_PCF8575<<1,(uint8_t*)data_set,2,30);
 8000a10:	231e      	movs	r3, #30
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2302      	movs	r3, #2
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <check_status+0xb4>)
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <check_status+0xb8>)
 8000a1c:	f002 fea0 	bl	8003760 <HAL_I2C_Master_Transmit>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20001e7c 	.word	0x20001e7c
 8000a2c:	20001894 	.word	0x20001894
 8000a30:	20001898 	.word	0x20001898
 8000a34:	20001930 	.word	0x20001930
 8000a38:	20001e5c 	.word	0x20001e5c
 8000a3c:	20001a74 	.word	0x20001a74
 8000a40:	20001964 	.word	0x20001964
 8000a44:	20000004 	.word	0x20000004
 8000a48:	20001ef8 	.word	0x20001ef8

08000a4c <digital_pcf8575>:



/********************************Digital******************************************/
static uint8_t digital_pcf8575(uint8_t portP_)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	uint8_t pcf8575_digital[2] = {0xff,0xff};
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_DeInit(&hi2c1);
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <digital_pcf8575+0x40>)
 8000a5e:	f002 fe4f 	bl	8003700 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <digital_pcf8575+0x40>)
 8000a64:	f002 fd08 	bl	8003478 <HAL_I2C_Init>
	HAL_I2C_Master_Receive(&hi2c1, address_PCF8575<<1,pcf8575_digital, 2, 200);
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	23c8      	movs	r3, #200	; 0xc8
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2302      	movs	r3, #2
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <digital_pcf8575+0x40>)
 8000a76:	f002 ff71 	bl	800395c <HAL_I2C_Master_Receive>
	return pcf8575_digital[portP_];
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	443b      	add	r3, r7
 8000a80:	f813 3c04 	ldrb.w	r3, [r3, #-4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20001ef8 	.word	0x20001ef8

08000a90 <read_input_digital>:


static void read_input_digital()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	uint8_t digi = digital_pcf8575(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff ffd8 	bl	8000a4c <digital_pcf8575>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	70fb      	strb	r3, [r7, #3]
			if(digi != 0Xff)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2bff      	cmp	r3, #255	; 0xff
 8000aa4:	d032      	beq.n	8000b0c <read_input_digital+0x7c>
			{
				if(last_digital != digi){
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <read_input_digital+0x8c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	78fa      	ldrb	r2, [r7, #3]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d029      	beq.n	8000b04 <read_input_digital+0x74>
					for(int i = 0 ; i < sizeDATA_toggle; i++){
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	e00d      	b.n	8000ad2 <read_input_digital+0x42>
						input_toggle(&DATA_toggle[i][0],digi);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2232      	movs	r2, #50	; 0x32
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <read_input_digital+0x90>)
 8000ac0:	4413      	add	r3, r2
 8000ac2:	78fa      	ldrb	r2, [r7, #3]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f8cc 	bl	8000c64 <input_toggle>
					for(int i = 0 ; i < sizeDATA_toggle; i++){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <read_input_digital+0x94>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4293      	cmp	r3, r2
 8000adc:	dbeb      	blt.n	8000ab6 <read_input_digital+0x26>

					}
					rx_buffer[0] = ID;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <read_input_digital+0x98>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
					rx_buffer[1] = 11;//cmd write digital
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <read_input_digital+0x98>)
 8000ae6:	220b      	movs	r2, #11
 8000ae8:	705a      	strb	r2, [r3, #1]
					rx_buffer[2] = 1; //length
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <read_input_digital+0x98>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	709a      	strb	r2, [r3, #2]
					rx_buffer[3] = digital_pcf8575(0); //data address
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff ffab 	bl	8000a4c <digital_pcf8575>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <read_input_digital+0x98>)
 8000afc:	70da      	strb	r2, [r3, #3]
					tx_crc(4);
 8000afe:	2004      	movs	r0, #4
 8000b00:	f001 f87a 	bl	8001bf8 <tx_crc>


				}

					last_digital = digi;
 8000b04:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <read_input_digital+0x8c>)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	7013      	strb	r3, [r2, #0]
			else
			{
				last_digital = 0;
			}

}
 8000b0a:	e002      	b.n	8000b12 <read_input_digital+0x82>
				last_digital = 0;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <read_input_digital+0x8c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000002 	.word	0x20000002
 8000b20:	20001a74 	.word	0x20001a74
 8000b24:	20001e5c 	.word	0x20001e5c
 8000b28:	20000e9c 	.word	0x20000e9c

08000b2c <write_digital>:

static void write_digital(uint8_t* input)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	6078      	str	r0, [r7, #4]
	data_set[0] = digital_pcf8575(0);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ff89 	bl	8000a4c <digital_pcf8575>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <write_digital+0xcc>)
 8000b40:	701a      	strb	r2, [r3, #0]
	data_set[1] = 0xFF;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <write_digital+0xcc>)
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	705a      	strb	r2, [r3, #1]
	for(int i=0;i<input[2];i+=2)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e036      	b.n	8000bbc <write_digital+0x90>
	{
		data_set[0] = (~(1<<input[3+i])& data_set[0] ) | (input[4+i]<<input[3+i]);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3303      	adds	r3, #3
 8000b52:	461a      	mov	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25a      	sxtb	r2, r3
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <write_digital+0xcc>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3304      	adds	r3, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	440b      	add	r3, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3303      	adds	r3, #3
 8000b82:	4618      	mov	r0, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4403      	add	r3, r0
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <write_digital+0xcc>)
 8000b98:	701a      	strb	r2, [r3, #0]
		HAL_I2C_DeInit(&hi2c1);
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <write_digital+0xd0>)
 8000b9c:	f002 fdb0 	bl	8003700 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1);
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <write_digital+0xd0>)
 8000ba2:	f002 fc69 	bl	8003478 <HAL_I2C_Init>
		HAL_I2C_Master_Transmit(&hi2c1,address_PCF8575<<1,(uint8_t*)data_set,2,30);
 8000ba6:	231e      	movs	r3, #30
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2302      	movs	r3, #2
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <write_digital+0xcc>)
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <write_digital+0xd0>)
 8000bb2:	f002 fdd5 	bl	8003760 <HAL_I2C_Master_Transmit>
	for(int i=0;i<input[2];i+=2)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	dbc1      	blt.n	8000b4e <write_digital+0x22>
	}

	rx_buffer[0] = ID;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <write_digital+0xd4>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
	rx_buffer[1] = 2;//cmd write digital
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <write_digital+0xd4>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	705a      	strb	r2, [r3, #1]
	rx_buffer[2] = 1; //length
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <write_digital+0xd4>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	709a      	strb	r2, [r3, #2]
	rx_buffer[3] = digital_pcf8575(0); //data address
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff35 	bl	8000a4c <digital_pcf8575>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <write_digital+0xd4>)
 8000be8:	70da      	strb	r2, [r3, #3]
	tx_crc(4);
 8000bea:	2004      	movs	r0, #4
 8000bec:	f001 f804 	bl	8001bf8 <tx_crc>

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	20001ef8 	.word	0x20001ef8
 8000c00:	20000e9c 	.word	0x20000e9c

08000c04 <read_output_digital>:


static void read_output_digital(uint8_t* input)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	get_digital[1] = digital_pcf8575(0);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff ff1d 	bl	8000a4c <digital_pcf8575>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <read_output_digital+0x58>)
 8000c18:	705a      	strb	r2, [r3, #1]
	for(int k=0;k<2;k++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e00b      	b.n	8000c38 <read_output_digital+0x34>
		rx_buffer[k] = input[k];
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	7819      	ldrb	r1, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <read_output_digital+0x5c>)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	460a      	mov	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
	for(int k=0;k<2;k++)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	ddf0      	ble.n	8000c20 <read_output_digital+0x1c>
	rx_buffer[2] = 1;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <read_output_digital+0x5c>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	709a      	strb	r2, [r3, #2]
	rx_buffer[3] = get_digital[1];
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <read_output_digital+0x58>)
 8000c46:	785a      	ldrb	r2, [r3, #1]
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <read_output_digital+0x5c>)
 8000c4a:	70da      	strb	r2, [r3, #3]
	tx_crc(4);
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f000 ffd3 	bl	8001bf8 <tx_crc>

}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000e9c 	.word	0x20000e9c

08000c64 <input_toggle>:


static void input_toggle(uint8_t *data , uint8_t data_pin){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	uint8_t position;
	uint8_t data_port = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < data[1] ; i++){
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	e03b      	b.n	8000cf2 <input_toggle+0x8e>
		position  = 0x01;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	72fb      	strb	r3, [r7, #11]
		position &= data_pin >> data[2+i];
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	3202      	adds	r2, #2
 8000c84:	4611      	mov	r1, r2
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	440a      	add	r2, r1
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	4113      	asrs	r3, r2
 8000c8e:	b25a      	sxtb	r2, r3
 8000c90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c94:	4013      	ands	r3, r2
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	72fb      	strb	r3, [r7, #11]
		if((position&0x01) == 0){
 8000c9a:	7afb      	ldrb	r3, [r7, #11]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d123      	bne.n	8000cec <input_toggle+0x88>
			for(int k = 0; k < (data[0]-data[1]-1) ; k++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e015      	b.n	8000cd6 <input_toggle+0x72>
				data_port |= (1<<data[data[1]+2+k]);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3301      	adds	r3, #1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	1c9a      	adds	r2, r3, #2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	b25a      	sxtb	r2, r3
 8000cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	75fb      	strb	r3, [r7, #23]
			for(int k = 0; k < (data[0]-data[1]-1) ; k++){
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbde      	blt.n	8000caa <input_toggle+0x46>
	for(int i = 0; i < data[1] ; i++){
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	dbbc      	blt.n	8000c7a <input_toggle+0x16>
			}
		}
	}
	toggle_port(data_port);
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f84a 	bl	8000d9c <toggle_port>

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <write_pin_digital>:
	rx_buffer[3] = digital_pcf8575(0); //data address
	tx_crc(4);

}

static void write_pin_digital(uint8_t data_pin, uint8_t data){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	data_set[0] = digital_pcf8575(0);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fe93 	bl	8000a4c <digital_pcf8575>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <write_pin_digital+0x84>)
 8000d2c:	701a      	strb	r2, [r3, #0]
	data_set[0] =  (~(1<<data_pin)& data_set[0] ) | (((~data)&0x01)<<data_pin);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2201      	movs	r2, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	b25a      	sxtb	r2, r3
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <write_pin_digital+0x84>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	4013      	ands	r3, r2
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bf0c      	ite	eq
 8000d50:	2301      	moveq	r3, #1
 8000d52:	2300      	movne	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <write_pin_digital+0x84>)
 8000d68:	701a      	strb	r2, [r3, #0]
	data_set[1] = 0xFF;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <write_pin_digital+0x84>)
 8000d6c:	22ff      	movs	r2, #255	; 0xff
 8000d6e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_DeInit(&hi2c1);
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <write_pin_digital+0x88>)
 8000d72:	f002 fcc5 	bl	8003700 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8000d76:	4808      	ldr	r0, [pc, #32]	; (8000d98 <write_pin_digital+0x88>)
 8000d78:	f002 fb7e 	bl	8003478 <HAL_I2C_Init>
	HAL_I2C_Master_Transmit(&hi2c1,address_PCF8575<<1,(uint8_t*)data_set,2,20);
 8000d7c:	2314      	movs	r3, #20
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2302      	movs	r3, #2
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <write_pin_digital+0x84>)
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	4804      	ldr	r0, [pc, #16]	; (8000d98 <write_pin_digital+0x88>)
 8000d88:	f002 fcea 	bl	8003760 <HAL_I2C_Master_Transmit>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000004 	.word	0x20000004
 8000d98:	20001ef8 	.word	0x20001ef8

08000d9c <toggle_port>:


static void toggle_port(uint8_t port)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	data_set[0]=digital_pcf8575(0);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fe50 	bl	8000a4c <digital_pcf8575>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <toggle_port+0x78>)
 8000db2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	e017      	b.n	8000dea <toggle_port+0x4e>
	{
		if(port & (1<<i))
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	fa42 f303 	asr.w	r3, r2, r3
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00c      	beq.n	8000de4 <toggle_port+0x48>
		{
			data_set[0] ^= (1<<i);
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <toggle_port+0x78>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	4053      	eors	r3, r2
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <toggle_port+0x78>)
 8000de2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	dde4      	ble.n	8000dba <toggle_port+0x1e>
		}
	}
	HAL_I2C_DeInit(&hi2c1);
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <toggle_port+0x7c>)
 8000df2:	f002 fc85 	bl	8003700 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <toggle_port+0x7c>)
 8000df8:	f002 fb3e 	bl	8003478 <HAL_I2C_Init>

	HAL_I2C_Master_Transmit(&hi2c1,address_PCF8575<<1,(uint8_t*)data_set,2,20);
 8000dfc:	2314      	movs	r3, #20
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2302      	movs	r3, #2
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <toggle_port+0x78>)
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <toggle_port+0x7c>)
 8000e08:	f002 fcaa 	bl	8003760 <HAL_I2C_Master_Transmit>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20001ef8 	.word	0x20001ef8

08000e1c <read_i2c>:


/********************************I2C******************************************/
static void read_i2c(uint8_t* input,uint8_t count_i2c)
{
 8000e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e20:	b089      	sub	sp, #36	; 0x24
 8000e22:	af02      	add	r7, sp, #8
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70fb      	strb	r3, [r7, #3]
 8000e2a:	466b      	mov	r3, sp
 8000e2c:	461e      	mov	r6, r3
	//BHV150FVI
	uint8_t data_re[input[4]];
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3304      	adds	r3, #4
 8000e32:	7819      	ldrb	r1, [r3, #0]
 8000e34:	460b      	mov	r3, r1
 8000e36:	3b01      	subs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	b2cb      	uxtb	r3, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4698      	mov	r8, r3
 8000e40:	4691      	mov	r9, r2
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e56:	b2cb      	uxtb	r3, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	461c      	mov	r4, r3
 8000e5c:	4615      	mov	r5, r2
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	00eb      	lsls	r3, r5, #3
 8000e68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e6c:	00e2      	lsls	r2, r4, #3
 8000e6e:	460b      	mov	r3, r1
 8000e70:	3307      	adds	r3, #7
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7a:	ab02      	add	r3, sp, #8
 8000e7c:	3300      	adds	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
	HAL_I2C_DeInit(&hi2c2);
 8000e80:	482b      	ldr	r0, [pc, #172]	; (8000f30 <read_i2c+0x114>)
 8000e82:	f002 fc3d 	bl	8003700 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c2);
 8000e86:	482a      	ldr	r0, [pc, #168]	; (8000f30 <read_i2c+0x114>)
 8000e88:	f002 faf6 	bl	8003478 <HAL_I2C_Init>
	if(HAL_I2C_Master_Receive(&hi2c2,input[3]<<1,data_re,input[4],200)==HAL_OK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3303      	adds	r3, #3
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	b299      	uxth	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	22c8      	movs	r2, #200	; 0xc8
 8000ea2:	9200      	str	r2, [sp, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4822      	ldr	r0, [pc, #136]	; (8000f30 <read_i2c+0x114>)
 8000ea8:	f002 fd58 	bl	800395c <HAL_I2C_Master_Receive>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d137      	bne.n	8000f22 <read_i2c+0x106>
	{
		for(uint8_t i =0;i<input[4];i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	75bb      	strb	r3, [r7, #22]
 8000eb6:	e009      	b.n	8000ecc <read_i2c+0xb0>
			rx_buffer[i] = input[i];
 8000eb8:	7dbb      	ldrb	r3, [r7, #22]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	441a      	add	r2, r3
 8000ebe:	7dbb      	ldrb	r3, [r7, #22]
 8000ec0:	7811      	ldrb	r1, [r2, #0]
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <read_i2c+0x118>)
 8000ec4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i =0;i<input[4];i++)
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	75bb      	strb	r3, [r7, #22]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	7dba      	ldrb	r2, [r7, #22]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3ef      	bcc.n	8000eb8 <read_i2c+0x9c>
		rx_buffer[2] = input[4]+1; //length
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3304      	adds	r3, #4
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <read_i2c+0x118>)
 8000ee4:	709a      	strb	r2, [r3, #2]
		rx_buffer[3] = input[3];//data address.
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	78da      	ldrb	r2, [r3, #3]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <read_i2c+0x118>)
 8000eec:	70da      	strb	r2, [r3, #3]
		for(uint8_t i =0;i<input[2+2];i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e009      	b.n	8000f08 <read_i2c+0xec>
			rx_buffer[i+4] = data_re[i];
 8000ef4:	7dfa      	ldrb	r2, [r7, #23]
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	68f9      	ldr	r1, [r7, #12]
 8000efc:	5c89      	ldrb	r1, [r1, r2]
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <read_i2c+0x118>)
 8000f00:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i =0;i<input[2+2];i++)
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	3301      	adds	r3, #1
 8000f06:	75fb      	strb	r3, [r7, #23]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	7dfa      	ldrb	r2, [r7, #23]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3ef      	bcc.n	8000ef4 <read_i2c+0xd8>
		tx_crc(rx_buffer[2]+3);
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <read_i2c+0x118>)
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	3303      	adds	r3, #3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fe6b 	bl	8001bf8 <tx_crc>
 8000f22:	46b5      	mov	sp, r6

	}

}
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f2e:	bf00      	nop
 8000f30:	20001f4c 	.word	0x20001f4c
 8000f34:	20000e9c 	.word	0x20000e9c

08000f38 <scan_i2c>:


/*SCAN I2C*/
static void scan_i2c(uint8_t* input)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	rx_buffer[0] = ID;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <scan_i2c+0x80>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
	rx_buffer[1] = 3;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <scan_i2c+0x80>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	705a      	strb	r2, [r3, #1]
	rx_buffer[2] = 0;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <scan_i2c+0x80>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	709a      	strb	r2, [r3, #2]
	for(uint8_t i =1 ; i<128;i++)
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e020      	b.n	8000f9a <scan_i2c+0x62>
	{
		HAL_I2C_DeInit(&hi2c2);
 8000f58:	4818      	ldr	r0, [pc, #96]	; (8000fbc <scan_i2c+0x84>)
 8000f5a:	f002 fbd1 	bl	8003700 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c2);
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <scan_i2c+0x84>)
 8000f60:	f002 fa8a 	bl	8003478 <HAL_I2C_Init>
		if(HAL_I2C_IsDeviceReady(&hi2c2, i<<1,2,2) == HAL_OK)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <scan_i2c+0x84>)
 8000f72:	f002 ff53 	bl	8003e1c <HAL_I2C_IsDeviceReady>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <scan_i2c+0x5c>
		{
			rx_buffer[2]+=1;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <scan_i2c+0x80>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <scan_i2c+0x80>)
 8000f86:	709a      	strb	r2, [r3, #2]
			rx_buffer[rx_buffer[2]+2]= i;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <scan_i2c+0x80>)
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	490a      	ldr	r1, [pc, #40]	; (8000fb8 <scan_i2c+0x80>)
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i =1 ; i<128;i++)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	dada      	bge.n	8000f58 <scan_i2c+0x20>
		}
	}
	tx_crc(rx_buffer[2]+3);
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <scan_i2c+0x80>)
 8000fa4:	789b      	ldrb	r3, [r3, #2]
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fe24 	bl	8001bf8 <tx_crc>

}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000e9c 	.word	0x20000e9c
 8000fbc:	20001f4c 	.word	0x20001f4c

08000fc0 <request_i2c>:


/* REQUEST I2C */
static void request_i2c(uint8_t* input,uint8_t size)
{
 8000fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fc4:	b089      	sub	sp, #36	; 0x24
 8000fc6:	af02      	add	r7, sp, #8
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70fb      	strb	r3, [r7, #3]
 8000fce:	466b      	mov	r3, sp
 8000fd0:	461e      	mov	r6, r3

	memcpy(data_i2c,input,size);
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4839      	ldr	r0, [pc, #228]	; (80010c0 <request_i2c+0x100>)
 8000fda:	f004 feab 	bl	8005d34 <memcpy>
		//lưu giá trị đọc được vào biến data_t_t
		uint8_t data_t_t[input[2]-3];//length of data - 1 time delay -1 number of byte - 1 byte address i2c
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	1ed9      	subs	r1, r3, #3
 8000fe6:	1e4b      	subs	r3, r1, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	460a      	mov	r2, r1
 8000fec:	2300      	movs	r3, #0
 8000fee:	4690      	mov	r8, r2
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001006:	460a      	mov	r2, r1
 8001008:	2300      	movs	r3, #0
 800100a:	4614      	mov	r4, r2
 800100c:	461d      	mov	r5, r3
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	00eb      	lsls	r3, r5, #3
 8001018:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800101c:	00e2      	lsls	r2, r4, #3
 800101e:	460b      	mov	r3, r1
 8001020:	3307      	adds	r3, #7
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	ebad 0d03 	sub.w	sp, sp, r3
 800102a:	ab02      	add	r3, sp, #8
 800102c:	3300      	adds	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
		for(int i =0;i<input[2]-3;i++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e00d      	b.n	8001052 <request_i2c+0x92>
			data_t_t[i] = input[4+i];
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3304      	adds	r3, #4
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	7819      	ldrb	r1, [r3, #0]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	460a      	mov	r2, r1
 800104a:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<input[2]-3;i++)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3302      	adds	r3, #2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3b03      	subs	r3, #3
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbea      	blt.n	8001036 <request_i2c+0x76>
		HAL_I2C_DeInit(&hi2c2);
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <request_i2c+0x104>)
 8001062:	f002 fb4d 	bl	8003700 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c2);
 8001066:	4817      	ldr	r0, [pc, #92]	; (80010c4 <request_i2c+0x104>)
 8001068:	f002 fa06 	bl	8003478 <HAL_I2C_Init>
		///khởi tạo giao thức I2C và gửi dữ liệu đến địa chỉ CB
		if(HAL_I2C_Master_Transmit(&hi2c2, input[3]<<1, (uint8_t *)data_t_t,input[2]-3, 300) == HAL_OK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3303      	adds	r3, #3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b299      	uxth	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b03      	subs	r3, #3
 8001082:	b29b      	uxth	r3, r3
 8001084:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <request_i2c+0x104>)
 800108e:	f002 fb67 	bl	8003760 <HAL_I2C_Master_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10d      	bne.n	80010b4 <request_i2c+0xf4>
		{
			time_i2c = HAL_GetTick();
 8001098:	f001 fbbc 	bl	8002814 <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <request_i2c+0x108>)
 80010a0:	6013      	str	r3, [r2, #0]
			time_delay = input[10];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	330a      	adds	r3, #10
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <request_i2c+0x10c>)
 80010ac:	601a      	str	r2, [r3, #0]
			flag_i2c = 1;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <request_i2c+0x110>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	46b5      	mov	sp, r6
		}
}
 80010b6:	bf00      	nop
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010c0:	20000e7c 	.word	0x20000e7c
 80010c4:	20001f4c 	.word	0x20001f4c
 80010c8:	20000e70 	.word	0x20000e70
 80010cc:	20000e78 	.word	0x20000e78
 80010d0:	20000e74 	.word	0x20000e74

080010d4 <write_i2c>:


static void write_i2c(uint8_t* input)
{
 80010d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d8:	b089      	sub	sp, #36	; 0x24
 80010da:	af02      	add	r7, sp, #8
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	466b      	mov	r3, sp
 80010e0:	461e      	mov	r6, r3
	uint8_t data[input[2]-1];
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3302      	adds	r3, #2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	1e59      	subs	r1, r3, #1
 80010ea:	1e4b      	subs	r3, r1, #1
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	460a      	mov	r2, r1
 80010f0:	2300      	movs	r3, #0
 80010f2:	4690      	mov	r8, r2
 80010f4:	4699      	mov	r9, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800110a:	460a      	mov	r2, r1
 800110c:	2300      	movs	r3, #0
 800110e:	4614      	mov	r4, r2
 8001110:	461d      	mov	r5, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	00eb      	lsls	r3, r5, #3
 800111c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001120:	00e2      	lsls	r2, r4, #3
 8001122:	460b      	mov	r3, r1
 8001124:	3307      	adds	r3, #7
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	ebad 0d03 	sub.w	sp, sp, r3
 800112e:	ab02      	add	r3, sp, #8
 8001130:	3300      	adds	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<input[2]-1;i++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00d      	b.n	8001156 <write_i2c+0x82>
		data[i] = input[4+i];
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3304      	adds	r3, #4
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	7819      	ldrb	r1, [r3, #0]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4413      	add	r3, r2
 800114c:	460a      	mov	r2, r1
 800114e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<input[2]-1;i++)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3302      	adds	r3, #2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3b01      	subs	r3, #1
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbea      	blt.n	800113a <write_i2c+0x66>
	HAL_I2C_DeInit(&hi2c2);
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <write_i2c+0xcc>)
 8001166:	f002 facb 	bl	8003700 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c2);
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <write_i2c+0xcc>)
 800116c:	f002 f984 	bl	8003478 <HAL_I2C_Init>
	HAL_I2C_Master_Transmit(&hi2c2,input[3]<<1,data,input[2]-1,120);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3303      	adds	r3, #3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	b299      	uxth	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3302      	adds	r3, #2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	2278      	movs	r2, #120	; 0x78
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <write_i2c+0xcc>)
 8001190:	f002 fae6 	bl	8003760 <HAL_I2C_Master_Transmit>
 8001194:	46b5      	mov	sp, r6
}
 8001196:	bf00      	nop
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011a0:	20001f4c 	.word	0x20001f4c

080011a4 <adc_ads1115>:


/********************************ADC******************************************/
static uint16_t adc_ads1115(uint8_t portA_)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	read_adc_error = false;
 80011ae:	4b7e      	ldr	r3, [pc, #504]	; (80013a8 <adc_ads1115+0x204>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80011b4:	487d      	ldr	r0, [pc, #500]	; (80013ac <adc_ads1115+0x208>)
 80011b6:	f002 faa3 	bl	8003700 <HAL_I2C_DeInit>
	uint8_t ads1115_cmd[3]={0x01,0x00,0x83};
 80011ba:	4a7d      	ldr	r2, [pc, #500]	; (80013b0 <adc_ads1115+0x20c>)
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4611      	mov	r1, r2
 80011c4:	8019      	strh	r1, [r3, #0]
 80011c6:	3302      	adds	r3, #2
 80011c8:	0c12      	lsrs	r2, r2, #16
 80011ca:	701a      	strb	r2, [r3, #0]
	uint8_t ads1115_read[2] = {0x00,0x00};
 80011cc:	2300      	movs	r3, #0
 80011ce:	81bb      	strh	r3, [r7, #12]
	uint16_t ads1115_adc = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	82fb      	strh	r3, [r7, #22]
	ads1115_cmd[1]=0xC3 + 0x10*portA_;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3b3d      	subs	r3, #61	; 0x3d
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	747b      	strb	r3, [r7, #17]
	if(portA_<4)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d86c      	bhi.n	80012c0 <adc_ads1115+0x11c>
	{
		ads1115_cmd[1]=0xC3 + 0x10*portA_;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3b3d      	subs	r3, #61	; 0x3d
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Init(&hi2c1);
 80011f2:	486e      	ldr	r0, [pc, #440]	; (80013ac <adc_ads1115+0x208>)
 80011f4:	f002 f940 	bl	8003478 <HAL_I2C_Init>
		if(HAL_I2C_Master_Transmit(&hi2c1,address_ADS1115<<1 ,(uint8_t*)ads1115_cmd, 3, 200)!=HAL_OK){
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	23c8      	movs	r3, #200	; 0xc8
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2303      	movs	r3, #3
 8001202:	2190      	movs	r1, #144	; 0x90
 8001204:	4869      	ldr	r0, [pc, #420]	; (80013ac <adc_ads1115+0x208>)
 8001206:	f002 faab 	bl	8003760 <HAL_I2C_Master_Transmit>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <adc_ads1115+0x76>
			read_adc_error = true;
 8001210:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <adc_ads1115+0x204>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
			return 0;
 8001216:	2300      	movs	r3, #0
 8001218:	e0c2      	b.n	80013a0 <adc_ads1115+0x1fc>
		}
		HAL_I2C_DeInit(&hi2c1);
 800121a:	4864      	ldr	r0, [pc, #400]	; (80013ac <adc_ads1115+0x208>)
 800121c:	f002 fa70 	bl	8003700 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1);
 8001220:	4862      	ldr	r0, [pc, #392]	; (80013ac <adc_ads1115+0x208>)
 8001222:	f002 f929 	bl	8003478 <HAL_I2C_Init>
		if(HAL_I2C_Master_Transmit(&hi2c1,address_ADS1115<<1 ,0X00,1, 100)!=HAL_OK){
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	2200      	movs	r2, #0
 800122e:	2190      	movs	r1, #144	; 0x90
 8001230:	485e      	ldr	r0, [pc, #376]	; (80013ac <adc_ads1115+0x208>)
 8001232:	f002 fa95 	bl	8003760 <HAL_I2C_Master_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <adc_ads1115+0xa2>
			read_adc_error =true;
 800123c:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <adc_ads1115+0x204>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
			return 0;
 8001242:	2300      	movs	r3, #0
 8001244:	e0ac      	b.n	80013a0 <adc_ads1115+0x1fc>
		}
		HAL_I2C_DeInit(&hi2c1);
 8001246:	4859      	ldr	r0, [pc, #356]	; (80013ac <adc_ads1115+0x208>)
 8001248:	f002 fa5a 	bl	8003700 <HAL_I2C_DeInit>
		HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f001 faeb 	bl	8002828 <HAL_Delay>
		for(uint8_t i = 0;i<10;i++){
 8001252:	2300      	movs	r3, #0
 8001254:	757b      	strb	r3, [r7, #21]
 8001256:	e02a      	b.n	80012ae <adc_ads1115+0x10a>

			HAL_I2C_Init(&hi2c1);
 8001258:	4854      	ldr	r0, [pc, #336]	; (80013ac <adc_ads1115+0x208>)
 800125a:	f002 f90d 	bl	8003478 <HAL_I2C_Init>
			if(HAL_I2C_Master_Receive(&hi2c1,address_ADS1115<<1,(uint8_t*)ads1115_read, 2, 200)!= HAL_OK){
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	23c8      	movs	r3, #200	; 0xc8
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2302      	movs	r3, #2
 8001268:	2190      	movs	r1, #144	; 0x90
 800126a:	4850      	ldr	r0, [pc, #320]	; (80013ac <adc_ads1115+0x208>)
 800126c:	f002 fb76 	bl	800395c <HAL_I2C_Master_Receive>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <adc_ads1115+0xdc>
				read_adc_error = true;
 8001276:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <adc_ads1115+0x204>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
				return 0;
 800127c:	2300      	movs	r3, #0
 800127e:	e08f      	b.n	80013a0 <adc_ads1115+0x1fc>
			}
			HAL_I2C_DeInit(&hi2c1);
 8001280:	484a      	ldr	r0, [pc, #296]	; (80013ac <adc_ads1115+0x208>)
 8001282:	f002 fa3d 	bl	8003700 <HAL_I2C_DeInit>
			HAL_Delay(5);
 8001286:	2005      	movs	r0, #5
 8001288:	f001 face 	bl	8002828 <HAL_Delay>
			ads1115_adc = (ads1115_adc + (uint16_t)((ads1115_read[0]<<8)|ads1115_read[1]))/2;
 800128c:	8afb      	ldrh	r3, [r7, #22]
 800128e:	7b3a      	ldrb	r2, [r7, #12]
 8001290:	0212      	lsls	r2, r2, #8
 8001292:	b211      	sxth	r1, r2
 8001294:	7b7a      	ldrb	r2, [r7, #13]
 8001296:	b212      	sxth	r2, r2
 8001298:	430a      	orrs	r2, r1
 800129a:	b212      	sxth	r2, r2
 800129c:	b292      	uxth	r2, r2
 800129e:	4413      	add	r3, r2
 80012a0:	0fda      	lsrs	r2, r3, #31
 80012a2:	4413      	add	r3, r2
 80012a4:	105b      	asrs	r3, r3, #1
 80012a6:	82fb      	strh	r3, [r7, #22]
		for(uint8_t i = 0;i<10;i++){
 80012a8:	7d7b      	ldrb	r3, [r7, #21]
 80012aa:	3301      	adds	r3, #1
 80012ac:	757b      	strb	r3, [r7, #21]
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d9d1      	bls.n	8001258 <adc_ads1115+0xb4>
		}
		if(ads1115_adc < 3){
 80012b4:	8afb      	ldrh	r3, [r7, #22]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d871      	bhi.n	800139e <adc_ads1115+0x1fa>
			ads1115_adc = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	82fb      	strh	r3, [r7, #22]
 80012be:	e06e      	b.n	800139e <adc_ads1115+0x1fa>
		}
	}
	else if(portA_>3  && portA_<8){
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d96b      	bls.n	800139e <adc_ads1115+0x1fa>
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d868      	bhi.n	800139e <adc_ads1115+0x1fa>
		ads1115_cmd[1]=0xC3 + 0x10*(portA_-4);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	3b04      	subs	r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3b3d      	subs	r3, #61	; 0x3d
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	747b      	strb	r3, [r7, #17]

		HAL_I2C_Init(&hi2c1);
 80012dc:	4833      	ldr	r0, [pc, #204]	; (80013ac <adc_ads1115+0x208>)
 80012de:	f002 f8cb 	bl	8003478 <HAL_I2C_Init>
		if(HAL_I2C_Master_Transmit(&hi2c1,address_ADS1115a<<1 ,(uint8_t*)ads1115_cmd, 3, 200)!=HAL_OK){
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	23c8      	movs	r3, #200	; 0xc8
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2303      	movs	r3, #3
 80012ec:	2192      	movs	r1, #146	; 0x92
 80012ee:	482f      	ldr	r0, [pc, #188]	; (80013ac <adc_ads1115+0x208>)
 80012f0:	f002 fa36 	bl	8003760 <HAL_I2C_Master_Transmit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <adc_ads1115+0x160>
			read_adc_error = true;
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <adc_ads1115+0x204>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
			return 0;
 8001300:	2300      	movs	r3, #0
 8001302:	e04d      	b.n	80013a0 <adc_ads1115+0x1fc>
		}
		HAL_I2C_DeInit(&hi2c1);
 8001304:	4829      	ldr	r0, [pc, #164]	; (80013ac <adc_ads1115+0x208>)
 8001306:	f002 f9fb 	bl	8003700 <HAL_I2C_DeInit>

		HAL_I2C_Init(&hi2c1);
 800130a:	4828      	ldr	r0, [pc, #160]	; (80013ac <adc_ads1115+0x208>)
 800130c:	f002 f8b4 	bl	8003478 <HAL_I2C_Init>
		if(HAL_I2C_Master_Transmit(&hi2c1,address_ADS1115a<<1 ,0X00,1, 100)!=HAL_OK){
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2200      	movs	r2, #0
 8001318:	2192      	movs	r1, #146	; 0x92
 800131a:	4824      	ldr	r0, [pc, #144]	; (80013ac <adc_ads1115+0x208>)
 800131c:	f002 fa20 	bl	8003760 <HAL_I2C_Master_Transmit>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <adc_ads1115+0x18c>
			read_adc_error =true;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <adc_ads1115+0x204>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
			return 0;
 800132c:	2300      	movs	r3, #0
 800132e:	e037      	b.n	80013a0 <adc_ads1115+0x1fc>
		}
		HAL_I2C_DeInit(&hi2c1);
 8001330:	481e      	ldr	r0, [pc, #120]	; (80013ac <adc_ads1115+0x208>)
 8001332:	f002 f9e5 	bl	8003700 <HAL_I2C_DeInit>

		HAL_Delay(10);
 8001336:	200a      	movs	r0, #10
 8001338:	f001 fa76 	bl	8002828 <HAL_Delay>
		for(uint8_t i = 0;i<10;i++){
 800133c:	2300      	movs	r3, #0
 800133e:	753b      	strb	r3, [r7, #20]
 8001340:	e02a      	b.n	8001398 <adc_ads1115+0x1f4>

			HAL_I2C_Init(&hi2c1);
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <adc_ads1115+0x208>)
 8001344:	f002 f898 	bl	8003478 <HAL_I2C_Init>
			if(HAL_I2C_Master_Receive(&hi2c1,address_ADS1115a<<1,(uint8_t*)ads1115_read, 2, 200)!= HAL_OK){
 8001348:	f107 020c 	add.w	r2, r7, #12
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	2192      	movs	r1, #146	; 0x92
 8001354:	4815      	ldr	r0, [pc, #84]	; (80013ac <adc_ads1115+0x208>)
 8001356:	f002 fb01 	bl	800395c <HAL_I2C_Master_Receive>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <adc_ads1115+0x1c6>
				read_adc_error = true;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <adc_ads1115+0x204>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
				return 0;
 8001366:	2300      	movs	r3, #0
 8001368:	e01a      	b.n	80013a0 <adc_ads1115+0x1fc>
			}
			HAL_I2C_Init(&hi2c1);
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <adc_ads1115+0x208>)
 800136c:	f002 f884 	bl	8003478 <HAL_I2C_Init>
			HAL_Delay(5);
 8001370:	2005      	movs	r0, #5
 8001372:	f001 fa59 	bl	8002828 <HAL_Delay>
			ads1115_adc = (ads1115_adc + (uint16_t)((ads1115_read[0]<<8)|ads1115_read[1]))/2;
 8001376:	8afb      	ldrh	r3, [r7, #22]
 8001378:	7b3a      	ldrb	r2, [r7, #12]
 800137a:	0212      	lsls	r2, r2, #8
 800137c:	b211      	sxth	r1, r2
 800137e:	7b7a      	ldrb	r2, [r7, #13]
 8001380:	b212      	sxth	r2, r2
 8001382:	430a      	orrs	r2, r1
 8001384:	b212      	sxth	r2, r2
 8001386:	b292      	uxth	r2, r2
 8001388:	4413      	add	r3, r2
 800138a:	0fda      	lsrs	r2, r3, #31
 800138c:	4413      	add	r3, r2
 800138e:	105b      	asrs	r3, r3, #1
 8001390:	82fb      	strh	r3, [r7, #22]
		for(uint8_t i = 0;i<10;i++){
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	753b      	strb	r3, [r7, #20]
 8001398:	7d3b      	ldrb	r3, [r7, #20]
 800139a:	2b09      	cmp	r3, #9
 800139c:	d9d1      	bls.n	8001342 <adc_ads1115+0x19e>
		if(ads1115_adc < 0){
			ads1115_adc = 0;
		}

	}
	return ads1115_adc;
 800139e:	8afb      	ldrh	r3, [r7, #22]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20001a60 	.word	0x20001a60
 80013ac:	20001ef8 	.word	0x20001ef8
 80013b0:	08005d78 	.word	0x08005d78

080013b4 <get_data_adc>:

static void get_data_adc()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
	uint16_t adc_read = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	81fb      	strh	r3, [r7, #14]
	uint8_t address[8] = {2,3,0,1,6,7,4,5};
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <get_data_adc+0x6c>)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c6:	e883 0003 	stmia.w	r3, {r0, r1}
	adc_read = adc_ads1115(address[count_adc]);
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <get_data_adc+0x70>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	3310      	adds	r3, #16
 80013d0:	443b      	add	r3, r7
 80013d2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fee4 	bl	80011a4 <adc_ads1115>
 80013dc:	4603      	mov	r3, r0
 80013de:	81fb      	strh	r3, [r7, #14]
	if(read_adc_error == false){
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <get_data_adc+0x74>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <get_data_adc+0x48>
		data_adc[count_adc]=adc_read;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <get_data_adc+0x70>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <get_data_adc+0x78>)
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	}
	count_adc++;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <get_data_adc+0x70>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <get_data_adc+0x70>)
 8001406:	701a      	strb	r2, [r3, #0]
	if(count_adc>=8)
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <get_data_adc+0x70>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d902      	bls.n	8001416 <get_data_adc+0x62>
	{
		count_adc =0;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <get_data_adc+0x70>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
	}
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	08005d7c 	.word	0x08005d7c
 8001424:	20001e7f 	.word	0x20001e7f
 8001428:	20001a60 	.word	0x20001a60
 800142c:	20001a64 	.word	0x20001a64

08001430 <read_adc>:

static void read_adc(uint8_t* input, uint8_t count_adc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
	uint16_t adc_value;
	int j=0;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
	for(int i=0;i<input[2];i++)
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	e01e      	b.n	8001484 <read_adc+0x54>
	{
		adc_value = data_adc[i];
 8001446:	4a25      	ldr	r2, [pc, #148]	; (80014dc <read_adc+0xac>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144e:	81bb      	strh	r3, [r7, #12]
		rx_buffer[3+j] = i;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3303      	adds	r3, #3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <read_adc+0xb0>)
 800145a:	54d1      	strb	r1, [r2, r3]
		rx_buffer[4+j] = (adc_value >> 8) & 0xff;// data MSB
 800145c:	89bb      	ldrh	r3, [r7, #12]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29a      	uxth	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3304      	adds	r3, #4
 8001466:	b2d1      	uxtb	r1, r2
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <read_adc+0xb0>)
 800146a:	54d1      	strb	r1, [r2, r3]
		rx_buffer[5+j] = adc_value & 0xff; // data LSB
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3305      	adds	r3, #5
 8001470:	89ba      	ldrh	r2, [r7, #12]
 8001472:	b2d1      	uxtb	r1, r2
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <read_adc+0xb0>)
 8001476:	54d1      	strb	r1, [r2, r3]
		j+=3;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3303      	adds	r3, #3
 800147c:	617b      	str	r3, [r7, #20]
	for(int i=0;i<input[2];i++)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3301      	adds	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3302      	adds	r3, #2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4293      	cmp	r3, r2
 8001490:	dbd9      	blt.n	8001446 <read_adc+0x16>
	}
	for(uint8_t i =0;i<2;i++)
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e009      	b.n	80014ac <read_adc+0x7c>
		rx_buffer[i] = input[i];
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	441a      	add	r2, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	7811      	ldrb	r1, [r2, #0]
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <read_adc+0xb0>)
 80014a4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i =0;i<2;i++)
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d9f2      	bls.n	8001498 <read_adc+0x68>
	rx_buffer[2] = input[2]*3; //length
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3302      	adds	r3, #2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	0052      	lsls	r2, r2, #1
 80014bc:	4413      	add	r3, r2
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <read_adc+0xb0>)
 80014c2:	709a      	strb	r2, [r3, #2]
	tx_crc(rx_buffer[2]+3);
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <read_adc+0xb0>)
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	3303      	adds	r3, #3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fb93 	bl	8001bf8 <tx_crc>

}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20001a64 	.word	0x20001a64
 80014e0:	20000e9c 	.word	0x20000e9c

080014e4 <read_RS485>:



/*****************************RS485******************************************/
static void read_RS485(uint8_t* cmd,uint8_t size)
{
 80014e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e8:	b08d      	sub	sp, #52	; 0x34
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	460b      	mov	r3, r1
 80014f0:	72fb      	strb	r3, [r7, #11]
 80014f2:	466b      	mov	r3, sp
 80014f4:	461e      	mov	r6, r3
	uint8_t command_tx[cmd[2]-1+2]; // sub by number of Byte to transmit to sensor
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3302      	adds	r3, #2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	1c59      	adds	r1, r3, #1
 80014fe:	1e4b      	subs	r3, r1, #1
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	460a      	mov	r2, r1
 8001504:	2300      	movs	r3, #0
 8001506:	603a      	str	r2, [r7, #0]
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	00c3      	lsls	r3, r0, #3
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	00c2      	lsls	r2, r0, #3
 8001520:	460a      	mov	r2, r1
 8001522:	2300      	movs	r3, #0
 8001524:	4692      	mov	sl, r2
 8001526:	469b      	mov	fp, r3
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800153c:	460b      	mov	r3, r1
 800153e:	3307      	adds	r3, #7
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	ebad 0d03 	sub.w	sp, sp, r3
 8001548:	466b      	mov	r3, sp
 800154a:	3300      	adds	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
	uint8_t c=0; // to count number array transmit
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t command_rx[cmd[size-4]]; //array to recevie from sensor
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	3b04      	subs	r3, #4
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	460b      	mov	r3, r1
 8001560:	3b01      	subs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	b2cb      	uxtb	r3, r1
 8001566:	2200      	movs	r2, #0
 8001568:	4698      	mov	r8, r3
 800156a:	4691      	mov	r9, r2
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001578:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800157c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001580:	b2cb      	uxtb	r3, r1
 8001582:	2200      	movs	r2, #0
 8001584:	461c      	mov	r4, r3
 8001586:	4615      	mov	r5, r2
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	00eb      	lsls	r3, r5, #3
 8001592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001596:	00e2      	lsls	r2, r4, #3
 8001598:	460b      	mov	r3, r1
 800159a:	3307      	adds	r3, #7
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	ebad 0d03 	sub.w	sp, sp, r3
 80015a4:	466b      	mov	r3, sp
 80015a6:	3300      	adds	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
	for(int i=0;i<size;i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	e019      	b.n	80015e4 <read_RS485+0x100>
	{
		if(i>=3 && i<cmd[2]-1+3)
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	dd13      	ble.n	80015de <read_RS485+0xfa>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3302      	adds	r3, #2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dc0c      	bgt.n	80015de <read_RS485+0xfa>
		{
			command_tx[c]=cmd[i];
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	441a      	add	r2, r3
 80015ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	54d1      	strb	r1, [r2, r3]
			c++;
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d8:	3301      	adds	r3, #1
 80015da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i=0;i<size;i++)
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	3301      	adds	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbe1      	blt.n	80015b0 <read_RS485+0xcc>
		}
	}
	uint16_t crc_modbus;
	crc_modbus = CRC16_Modbus(command_tx,c);
 80015ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f0:	4619      	mov	r1, r3
 80015f2:	69f8      	ldr	r0, [r7, #28]
 80015f4:	f7fe fe1c 	bl	8000230 <CRC16_Modbus>
 80015f8:	4603      	mov	r3, r0
 80015fa:	827b      	strh	r3, [r7, #18]
	for(int i=0;i<2;i++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001600:	e017      	b.n	8001632 <read_RS485+0x14e>
		command_tx[c+i]=(uint8_t)((crc_modbus & (0xFF00>>(8*i))) >> (8-(8*i)));
 8001602:	8a7a      	ldrh	r2, [r7, #18]
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800160c:	fa41 f303 	asr.w	r3, r1, r3
 8001610:	401a      	ands	r2, r3
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	f1c3 0301 	rsb	r3, r3, #1
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	fa42 f103 	asr.w	r1, r2, r3
 800161e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	4413      	add	r3, r2
 8001626:	b2c9      	uxtb	r1, r1
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<2;i++)
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	3301      	adds	r3, #1
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	2b01      	cmp	r3, #1
 8001636:	dde4      	ble.n	8001602 <read_RS485+0x11e>
	uint16_t temp;
	temp = command_tx[c];
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	823b      	strh	r3, [r7, #16]
	command_tx[c] = command_tx[c+1];
 8001642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164c:	69f9      	ldr	r1, [r7, #28]
 800164e:	5c89      	ldrb	r1, [r1, r2]
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	54d1      	strb	r1, [r2, r3]
	command_tx[c+1] = temp;
 8001654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001658:	3301      	adds	r3, #1
 800165a:	8a3a      	ldrh	r2, [r7, #16]
 800165c:	b2d1      	uxtb	r1, r2
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	54d1      	strb	r1, [r2, r3]
	//humi,temp.
	HAL_GPIO_WritePin(Tx_Rx_EN_GPIO_Port,Tx_Rx_EN_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2110      	movs	r1, #16
 8001666:	481c      	ldr	r0, [pc, #112]	; (80016d8 <read_RS485+0x1f4>)
 8001668:	f001 feee 	bl	8003448 <HAL_GPIO_WritePin>
//	HAL_UART_Transmit_DMA(&huart2, command_tx, c+2);
	HAL_UART_Transmit(&huart2, command_tx, c+2,300);
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001670:	b29b      	uxth	r3, r3
 8001672:	3302      	adds	r3, #2
 8001674:	b29a      	uxth	r2, r3
 8001676:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800167a:	69f9      	ldr	r1, [r7, #28]
 800167c:	4817      	ldr	r0, [pc, #92]	; (80016dc <read_RS485+0x1f8>)
 800167e:	f003 fc8e 	bl	8004f9e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(Tx_Rx_EN_GPIO_Port, Tx_Rx_EN_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2110      	movs	r1, #16
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <read_RS485+0x1f4>)
 8001688:	f001 fede 	bl	8003448 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartReciver_rs485, 30);
 800168c:	221e      	movs	r2, #30
 800168e:	4914      	ldr	r1, [pc, #80]	; (80016e0 <read_RS485+0x1fc>)
 8001690:	4812      	ldr	r0, [pc, #72]	; (80016dc <read_RS485+0x1f8>)
 8001692:	f003 fd83 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <read_RS485+0x200>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <read_RS485+0x200>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0204 	bic.w	r2, r2, #4
 80016a4:	601a      	str	r2, [r3, #0]
#ifdef DMA
		flag_rs485 = 1;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <read_RS485+0x204>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
		rx_buffer[2] = cmd[size-4]-2;//length
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	3b04      	subs	r3, #4
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3b02      	subs	r3, #2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <read_RS485+0x208>)
 80016bc:	709a      	strb	r2, [r3, #2]
		rx_buffer[3] = cmd[size-3];//cmd_ID -> RS485 Address (to indicating type which sever want to read)
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <read_RS485+0x208>)
 80016ca:	70da      	strb	r2, [r3, #3]
 80016cc:	46b5      	mov	sp, r6
       tx_crc(rx_buffer[2]+3);
       for( int i=0;i<30;i++)
    	   rx_buffer[i] =0;
	}
#endif
}
 80016ce:	bf00      	nop
 80016d0:	3734      	adds	r7, #52	; 0x34
 80016d2:	46bd      	mov	sp, r7
 80016d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016d8:	40010800 	.word	0x40010800
 80016dc:	20001fe4 	.word	0x20001fe4
 80016e0:	20001e84 	.word	0x20001e84
 80016e4:	200020b0 	.word	0x200020b0
 80016e8:	20001e7d 	.word	0x20001e7d
 80016ec:	20000e9c 	.word	0x20000e9c

080016f0 <rs485>:


static void rs485(uint8_t* payload,uint8_t size)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
   	flag_rs485 = 0;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <rs485+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
   	flag_rs485_rx= 0;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <rs485+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
	uint16_t crc_modbus;
	crc_modbus = CRC16_Modbus((uint8_t*)payload,size);
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7fe fd8f 	bl	8000230 <CRC16_Modbus>
 8001712:	4603      	mov	r3, r0
 8001714:	81fb      	strh	r3, [r7, #14]
	if(crc_modbus==0)
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d12e      	bne.n	800177a <rs485+0x8a>
	{
       rx_buffer[0] = ID;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <rs485+0x9c>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
       rx_buffer[1] = 8; // cmd
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <rs485+0x9c>)
 8001724:	2208      	movs	r2, #8
 8001726:	705a      	strb	r2, [r3, #1]
//       rx_buffer[2] = cmd[size_cmd-4]-2;//length
       int k;
       for(k=1;k<rx_buffer[2];k++)
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <rs485+0x54>
    	   rx_buffer[k+3] = payload[k];
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	441a      	add	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3303      	adds	r3, #3
 8001738:	7811      	ldrb	r1, [r2, #0]
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <rs485+0x9c>)
 800173c:	54d1      	strb	r1, [r2, r3]
       for(k=1;k<rx_buffer[2];k++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <rs485+0x9c>)
 8001746:	789b      	ldrb	r3, [r3, #2]
 8001748:	461a      	mov	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4293      	cmp	r3, r2
 800174e:	dbee      	blt.n	800172e <rs485+0x3e>
       tx_crc(rx_buffer[2]+3);
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <rs485+0x9c>)
 8001752:	789b      	ldrb	r3, [r3, #2]
 8001754:	3303      	adds	r3, #3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fa4d 	bl	8001bf8 <tx_crc>
       for( int i=0;i<30;i++)
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	e007      	b.n	8001774 <rs485+0x84>
    	   rx_buffer[i] =0;
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <rs485+0x9c>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
       for( int i=0;i<30;i++)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	3301      	adds	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b1d      	cmp	r3, #29
 8001778:	ddf4      	ble.n	8001764 <rs485+0x74>
	}
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20001e7d 	.word	0x20001e7d
 8001788:	20001e7e 	.word	0x20001e7e
 800178c:	20000e9c 	.word	0x20000e9c

08001790 <store_data_cmd>:
// size_change = true sizeData++
static void store_data_cmd(uint8_t* data, uint8_t* source, uint8_t lenght, uint8_t position, uint8_t size_change){
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	460b      	mov	r3, r1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	4613      	mov	r3, r2
 80017a4:	71bb      	strb	r3, [r7, #6]
	memset(data,0,50);
 80017a6:	2232      	movs	r2, #50	; 0x32
 80017a8:	2100      	movs	r1, #0
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f004 fad0 	bl	8005d50 <memset>
	memcpy(data,source,lenght);
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f004 fabc 	bl	8005d34 <memcpy>
	cmd_ID[position] = source[lenght-3];
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	3b03      	subs	r3, #3
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	441a      	add	r2, r3
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	7811      	ldrb	r1, [r2, #0]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <store_data_cmd+0x98>)
 80017ca:	54d1      	strb	r1, [r2, r3]
	countDATA[position] = lenght;
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	4917      	ldr	r1, [pc, #92]	; (800182c <store_data_cmd+0x9c>)
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	54ca      	strb	r2, [r1, r3]
	Timer[position] = ((source[lenght-2] << 8) | source[lenght-1]) ;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	3b02      	subs	r3, #2
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	440b      	add	r3, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	b291      	uxth	r1, r2
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <store_data_cmd+0xa0>)
 80017f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	real_time[position] = HAL_GetTick();
 80017fc:	79bc      	ldrb	r4, [r7, #6]
 80017fe:	f001 f809 	bl	8002814 <HAL_GetTick>
 8001802:	4603      	mov	r3, r0
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <store_data_cmd+0xa4>)
 8001806:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if(size_change){
 800180a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <store_data_cmd+0x8e>
		sizeDATA++;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <store_data_cmd+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <store_data_cmd+0xa8>)
 800181c:	701a      	strb	r2, [r3, #0]
	}

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20001930 	.word	0x20001930
 800182c:	20001898 	.word	0x20001898
 8001830:	200018cc 	.word	0x200018cc
 8001834:	20001998 	.word	0x20001998
 8001838:	20001894 	.word	0x20001894

0800183c <store_data_cmd_toggle>:
void store_data_cmd_toggle(uint8_t* data, uint8_t* source, uint8_t lenght, uint8_t position, uint8_t size_change){
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	460b      	mov	r3, r1
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	4613      	mov	r3, r2
 8001850:	71bb      	strb	r3, [r7, #6]
	memset(data,0,50);
 8001852:	2232      	movs	r2, #50	; 0x32
 8001854:	2100      	movs	r1, #0
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f004 fa7a 	bl	8005d50 <memset>
	memcpy(data,source,lenght);
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	461a      	mov	r2, r3
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f004 fa66 	bl	8005d34 <memcpy>
	cmd_ID_toggle[position] = source[lenght];
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	441a      	add	r2, r3
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	7811      	ldrb	r1, [r2, #0]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <store_data_cmd_toggle+0x54>)
 8001874:	54d1      	strb	r1, [r2, r3]
	if(size_change){
 8001876:	7e3b      	ldrb	r3, [r7, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <store_data_cmd_toggle+0x4c>
		sizeDATA_toggle++;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <store_data_cmd_toggle+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <store_data_cmd_toggle+0x58>)
 8001886:	701a      	strb	r2, [r3, #0]
	}

}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20001964 	.word	0x20001964
 8001894:	20001e5c 	.word	0x20001e5c

08001898 <write_to_STM>:
/********************************Set Timer to get data******************************************/
static void write_to_STM(uint8_t* input,uint8_t count)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b095      	sub	sp, #84	; 0x54
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
	uint8_t data_store_buff[30] = {0};
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	831a      	strh	r2, [r3, #24]
	uint8_t data_store_lenght;
	data_store_buff[0] = input[0];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	733b      	strb	r3, [r7, #12]
	data_store_buff[1] = input[3];
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	737b      	strb	r3, [r7, #13]
	memcpy(debug,input,count);
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	461a      	mov	r2, r3
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	48a9      	ldr	r0, [pc, #676]	; (8001b74 <write_to_STM+0x2dc>)
 80018d0:	f004 fa30 	bl	8005d34 <memcpy>
	switch(input[3]){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3303      	adds	r3, #3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b0b      	cmp	r3, #11
 80018dc:	f040 80c0 	bne.w	8001a60 <write_to_STM+0x1c8>
		case 11:{
			data_store_buff[2] = input[2] -  2;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3302      	adds	r3, #2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3b02      	subs	r3, #2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73bb      	strb	r3, [r7, #14]
			for(int i = 0 ; i < data_store_buff[2] ; i++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	; 0x44
 80018f0:	e00d      	b.n	800190e <write_to_STM+0x76>
				data_store_buff[i+3] =  input[i+4];
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	3304      	adds	r3, #4
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	441a      	add	r2, r3
 80018fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fc:	3303      	adds	r3, #3
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	3348      	adds	r3, #72	; 0x48
 8001902:	443b      	add	r3, r7
 8001904:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for(int i = 0 ; i < data_store_buff[2] ; i++){
 8001908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190a:	3301      	adds	r3, #1
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	461a      	mov	r2, r3
 8001912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001914:	4293      	cmp	r3, r2
 8001916:	dbec      	blt.n	80018f2 <write_to_STM+0x5a>
			}
			data_store_buff[data_store_buff[2]+3] = input[input[2] + 2];
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3302      	adds	r3, #2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3302      	adds	r3, #2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	441a      	add	r2, r3
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	3303      	adds	r3, #3
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	3348      	adds	r3, #72	; 0x48
 800192c:	443b      	add	r3, r7
 800192e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			data_store_lenght = data_store_buff[2] + 4;
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	3304      	adds	r3, #4
 8001936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			if(sizeDATA_toggle == 0){
 800193a:	4b8f      	ldr	r3, [pc, #572]	; (8001b78 <write_to_STM+0x2e0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <write_to_STM+0xc6>
				store_data_cmd_toggle(&DATA_toggle[0][0],&data_store_buff[2],data_store_lenght-1,0,true);
 8001942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001946:	3b01      	subs	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	1c99      	adds	r1, r3, #2
 8001950:	2301      	movs	r3, #1
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	4889      	ldr	r0, [pc, #548]	; (8001b7c <write_to_STM+0x2e4>)
 8001958:	f7ff ff70 	bl	800183c <store_data_cmd_toggle>
 800195c:	e05e      	b.n	8001a1c <write_to_STM+0x184>
			}
			else{
				uint8_t cmd_toggle_id;
				for(int i = 0; i<=sizeDATA_toggle ;i++){
 800195e:	2300      	movs	r3, #0
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
 8001962:	e055      	b.n	8001a10 <write_to_STM+0x178>
					cmd_toggle_id = DATA_toggle[i][DATA_toggle[i][0]+1];
 8001964:	4a85      	ldr	r2, [pc, #532]	; (8001b7c <write_to_STM+0x2e4>)
 8001966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001968:	2132      	movs	r1, #50	; 0x32
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4981      	ldr	r1, [pc, #516]	; (8001b7c <write_to_STM+0x2e4>)
 8001976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001978:	2032      	movs	r0, #50	; 0x32
 800197a:	fb00 f202 	mul.w	r2, r0, r2
 800197e:	440a      	add	r2, r1
 8001980:	4413      	add	r3, r2
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					if((data_store_buff[data_store_lenght-1] == cmd_toggle_id) && (i != sizeDATA_toggle)){
 8001988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800198c:	3b01      	subs	r3, #1
 800198e:	3348      	adds	r3, #72	; 0x48
 8001990:	443b      	add	r3, r7
 8001992:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001996:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800199a:	429a      	cmp	r2, r3
 800199c:	d11a      	bne.n	80019d4 <write_to_STM+0x13c>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <write_to_STM+0x2e0>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d014      	beq.n	80019d4 <write_to_STM+0x13c>
						store_data_cmd_toggle(&DATA_toggle[i][0],&data_store_buff[2],data_store_lenght-1,i,false);
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	2232      	movs	r2, #50	; 0x32
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <write_to_STM+0x2e4>)
 80019b4:	1898      	adds	r0, r3, r2
 80019b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c0:	b2dc      	uxtb	r4, r3
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	1c99      	adds	r1, r3, #2
 80019c8:	2300      	movs	r3, #0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	4623      	mov	r3, r4
 80019ce:	f7ff ff35 	bl	800183c <store_data_cmd_toggle>
						break;
 80019d2:	e023      	b.n	8001a1c <write_to_STM+0x184>
					}
					else if(i >= sizeDATA_toggle){
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <write_to_STM+0x2e0>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019dc:	4293      	cmp	r3, r2
 80019de:	db14      	blt.n	8001a0a <write_to_STM+0x172>
						store_data_cmd_toggle(&DATA_toggle[i][0],&data_store_buff[2],data_store_lenght-1,i,true);
 80019e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e2:	2232      	movs	r2, #50	; 0x32
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <write_to_STM+0x2e4>)
 80019ea:	1898      	adds	r0, r3, r2
 80019ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f6:	b2dc      	uxtb	r4, r3
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	1c99      	adds	r1, r3, #2
 80019fe:	2301      	movs	r3, #1
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4623      	mov	r3, r4
 8001a04:	f7ff ff1a 	bl	800183c <store_data_cmd_toggle>
						break;
 8001a08:	e008      	b.n	8001a1c <write_to_STM+0x184>
				for(int i = 0; i<=sizeDATA_toggle ;i++){
 8001a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <write_to_STM+0x2e0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	dda3      	ble.n	8001964 <write_to_STM+0xcc>
					}
				}
			}
			for(int i=0;i<2;i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a20:	e00b      	b.n	8001a3a <write_to_STM+0x1a2>
				rx_buffer[i] = input[i];
 8001a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	7819      	ldrb	r1, [r3, #0]
 8001a2a:	4a55      	ldr	r2, [pc, #340]	; (8001b80 <write_to_STM+0x2e8>)
 8001a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2e:	4413      	add	r3, r2
 8001a30:	460a      	mov	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<2;i++)
 8001a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a36:	3301      	adds	r3, #1
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	ddf0      	ble.n	8001a22 <write_to_STM+0x18a>

			rx_buffer[2]=1;
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <write_to_STM+0x2e8>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	709a      	strb	r2, [r3, #2]
			rx_buffer[3] = data_store_buff[data_store_lenght-1];
 8001a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	3348      	adds	r3, #72	; 0x48
 8001a4e:	443b      	add	r3, r7
 8001a50:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8001a54:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <write_to_STM+0x2e8>)
 8001a56:	70da      	strb	r2, [r3, #3]
			tx_crc(4);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f000 f8cd 	bl	8001bf8 <tx_crc>

		}
		break;
 8001a5e:	e0c2      	b.n	8001be6 <write_to_STM+0x34e>
		default:{
			data_store_buff[2] = input[2] -  4;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3302      	adds	r3, #2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	3b04      	subs	r3, #4
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73bb      	strb	r3, [r7, #14]
			for(int i = 0 ; i < data_store_buff[2] ; i++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a70:	e00d      	b.n	8001a8e <write_to_STM+0x1f6>
				data_store_buff[i+3] =  input[i+4];
 8001a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a74:	3304      	adds	r3, #4
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	441a      	add	r2, r3
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	3348      	adds	r3, #72	; 0x48
 8001a82:	443b      	add	r3, r7
 8001a84:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for(int i = 0 ; i < data_store_buff[2] ; i++){
 8001a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a94:	4293      	cmp	r3, r2
 8001a96:	dbec      	blt.n	8001a72 <write_to_STM+0x1da>
			}
			for(int i=0;i<3;i++){
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9c:	e015      	b.n	8001aca <write_to_STM+0x232>
				data_store_buff[data_store_buff[2]+i+3] = input[input[2] + i];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	4413      	add	r3, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	441a      	add	r2, r3
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3303      	adds	r3, #3
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	3348      	adds	r3, #72	; 0x48
 8001abe:	443b      	add	r3, r7
 8001ac0:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for(int i=0;i<3;i++){
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	dde6      	ble.n	8001a9e <write_to_STM+0x206>
			}
			data_store_lenght = data_store_buff[2] + 6;
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	3306      	adds	r3, #6
 8001ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			if(sizeDATA == 0){
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <write_to_STM+0x2ec>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <write_to_STM+0x25e>
					store_data_cmd(&DATA[0][0],data_store_buff,data_store_lenght,0,true);
 8001ae0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001ae4:	f107 010c 	add.w	r1, r7, #12
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	4826      	ldr	r0, [pc, #152]	; (8001b88 <write_to_STM+0x2f0>)
 8001af0:	f7ff fe4e 	bl	8001790 <store_data_cmd>
 8001af4:	e055      	b.n	8001ba2 <write_to_STM+0x30a>
			}
			else{
				for(int i = 0; i<=sizeDATA ;i++){
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
 8001afa:	e04c      	b.n	8001b96 <write_to_STM+0x2fe>
					if((data_store_buff[data_store_lenght-3] == cmd_ID[i]) && (i != sizeDATA)){
 8001afc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b00:	3b03      	subs	r3, #3
 8001b02:	3348      	adds	r3, #72	; 0x48
 8001b04:	443b      	add	r3, r7
 8001b06:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8001b0a:	4920      	ldr	r1, [pc, #128]	; (8001b8c <write_to_STM+0x2f4>)
 8001b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0e:	440b      	add	r3, r1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d116      	bne.n	8001b44 <write_to_STM+0x2ac>
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <write_to_STM+0x2ec>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d010      	beq.n	8001b44 <write_to_STM+0x2ac>
						store_data_cmd(&DATA[i][0],data_store_buff,data_store_lenght,i,false);
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	2232      	movs	r2, #50	; 0x32
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <write_to_STM+0x2f0>)
 8001b2c:	1898      	adds	r0, r3, r2
 8001b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b36:	f107 010c 	add.w	r1, r7, #12
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	9400      	str	r4, [sp, #0]
 8001b3e:	f7ff fe27 	bl	8001790 <store_data_cmd>
						break;
 8001b42:	e02e      	b.n	8001ba2 <write_to_STM+0x30a>
					}
					else if(i >= sizeDATA){
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <write_to_STM+0x2ec>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	db1f      	blt.n	8001b90 <write_to_STM+0x2f8>
						store_data_cmd(&DATA[i][0],data_store_buff,data_store_lenght,i,true);
 8001b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b52:	2232      	movs	r2, #50	; 0x32
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <write_to_STM+0x2f0>)
 8001b5a:	1898      	adds	r0, r3, r2
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b64:	f107 010c 	add.w	r1, r7, #12
 8001b68:	2401      	movs	r4, #1
 8001b6a:	9400      	str	r4, [sp, #0]
 8001b6c:	f7ff fe10 	bl	8001790 <store_data_cmd>
						break;
 8001b70:	e017      	b.n	8001ba2 <write_to_STM+0x30a>
 8001b72:	bf00      	nop
 8001b74:	20001e60 	.word	0x20001e60
 8001b78:	20001e5c 	.word	0x20001e5c
 8001b7c:	20001a74 	.word	0x20001a74
 8001b80:	20000e9c 	.word	0x20000e9c
 8001b84:	20001894 	.word	0x20001894
 8001b88:	20000ed0 	.word	0x20000ed0
 8001b8c:	20001930 	.word	0x20001930
				for(int i = 0; i<=sizeDATA ;i++){
 8001b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b92:	3301      	adds	r3, #1
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <write_to_STM+0x358>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	ddac      	ble.n	8001afc <write_to_STM+0x264>
					}
				}
			}

			for(int i=0;i<2;i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba6:	e00b      	b.n	8001bc0 <write_to_STM+0x328>
					rx_buffer[i] = input[i];
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	7819      	ldrb	r1, [r3, #0]
 8001bb0:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <write_to_STM+0x35c>)
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	4413      	add	r3, r2
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<2;i++)
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	ddf0      	ble.n	8001ba8 <write_to_STM+0x310>

			rx_buffer[2]=1;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <write_to_STM+0x35c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	709a      	strb	r2, [r3, #2]
			rx_buffer[3] = data_store_buff[data_store_lenght-3];
 8001bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	3348      	adds	r3, #72	; 0x48
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <write_to_STM+0x35c>)
 8001bdc:	70da      	strb	r2, [r3, #3]
			tx_crc(4);
 8001bde:	2004      	movs	r0, #4
 8001be0:	f000 f80a 	bl	8001bf8 <tx_crc>


		}
		break;
 8001be4:	bf00      	nop

	}

}
 8001be6:	bf00      	nop
 8001be8:	374c      	adds	r7, #76	; 0x4c
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001894 	.word	0x20001894
 8001bf4:	20000e9c 	.word	0x20000e9c

08001bf8 <tx_crc>:


/********************************Transmit to LORA******************************************/
 void tx_crc(uint8_t c1_CRC)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	uint16_t CRC_txdata = CRC16((uint8_t*)rx_buffer,c1_CRC);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <tx_crc+0x54>)
 8001c08:	f7fe fae0 	bl	80001cc <CRC16>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	81fb      	strh	r3, [r7, #14]
	rx_buffer[c1_CRC]= (CRC_txdata&0xFF);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	89fa      	ldrh	r2, [r7, #14]
 8001c14:	b2d1      	uxtb	r1, r2
 8001c16:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <tx_crc+0x54>)
 8001c18:	54d1      	strb	r1, [r2, r3]
	rx_buffer[c1_CRC+1]= ((CRC_txdata>>8)&0xFF);
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2d1      	uxtb	r1, r2
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <tx_crc+0x54>)
 8001c28:	54d1      	strb	r1, [r2, r3]
	uartSend_DMA(rx_buffer, c1_CRC+2);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <tx_crc+0x54>)
 8001c34:	f000 f80c 	bl	8001c50 <uartSend_DMA>
	memset(rx_buffer,0,50);
 8001c38:	2232      	movs	r2, #50	; 0x32
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <tx_crc+0x54>)
 8001c3e:	f004 f887 	bl	8005d50 <memset>
//	HAL_UART_Transmit(&huart1,rx_buffer,c1_CRC+2,200);
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000e9c 	.word	0x20000e9c

08001c50 <uartSend_DMA>:

 void uartSend_DMA(uint8_t* Pdata, uint8_t size){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t uart_error;

	uartSend_Store_Count[uartSend_Store_Size] = size;
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <uartSend_DMA+0xbc>)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	5453      	strb	r3, [r2, r1]
	memcpy(&uartSend_Store[uartSend_Store_Size][0],Pdata,size);
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2332      	movs	r3, #50	; 0x32
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <uartSend_DMA+0xc0>)
 8001c76:	4413      	add	r3, r2
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 f859 	bl	8005d34 <memcpy>
	uartSend_Store_Size++;
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c8c:	701a      	strb	r2, [r3, #0]

	if(uartSend_Store_Size >= MAX_SIZE_UARTSEND){
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d902      	bls.n	8001c9c <uartSend_DMA+0x4c>
		uartSend_Store_Size = MAX_SIZE_UARTSEND - 1;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c98:	2204      	movs	r2, #4
 8001c9a:	701a      	strb	r2, [r3, #0]
	}

	if(uartSend_Store_Size <= 1){
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <uartSend_DMA+0xb8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d82d      	bhi.n	8001d00 <uartSend_DMA+0xb0>

		uart_error = HAL_UART_Transmit_DMA(&huart1, &uartSend_Store[0][0], uartSend_Store_Count[0]);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <uartSend_DMA+0xbc>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	4918      	ldr	r1, [pc, #96]	; (8001d10 <uartSend_DMA+0xc0>)
 8001cae:	4819      	ldr	r0, [pc, #100]	; (8001d14 <uartSend_DMA+0xc4>)
 8001cb0:	f003 fa08 	bl	80050c4 <HAL_UART_Transmit_DMA>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]

		if((uart_error == HAL_BUSY) || (uart_error == HAL_ERROR)){
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d002      	beq.n	8001cc4 <uartSend_DMA+0x74>
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d11d      	bne.n	8001d00 <uartSend_DMA+0xb0>
			uartSend_Store_Count[0] = size;
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <uartSend_DMA+0xbc>)
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	7013      	strb	r3, [r2, #0]
			memcpy(&uartSend_Store[0][0],Pdata,size);
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <uartSend_DMA+0xc0>)
 8001cd2:	f004 f82f 	bl	8005d34 <memcpy>
			uartSend_Store_Size++;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <uartSend_DMA+0xb8>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <uartSend_DMA+0xb8>)
 8001ce0:	701a      	strb	r2, [r3, #0]

			if(uartSend_Store_Size >= MAX_SIZE_UARTSEND){
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <uartSend_DMA+0xb8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d902      	bls.n	8001cf0 <uartSend_DMA+0xa0>
				uartSend_Store_Size = MAX_SIZE_UARTSEND-1;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <uartSend_DMA+0xb8>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	701a      	strb	r2, [r3, #0]
			}

			flag_send_uart =1;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <uartSend_DMA+0xc8>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
			time_send_uart = HAL_GetTick();
 8001cf6:	f000 fd8d 	bl	8002814 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <uartSend_DMA+0xcc>)
 8001cfe:	6013      	str	r3, [r2, #0]
		}
	}

}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000335 	.word	0x20000335
 8001d0c:	20000330 	.word	0x20000330
 8001d10:	20000234 	.word	0x20000234
 8001d14:	20001fa0 	.word	0x20001fa0
 8001d18:	20000336 	.word	0x20000336
 8001d1c:	20000338 	.word	0x20000338

08001d20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
#ifdef IWG
	HAL_IWDG_Refresh(&hiwdg);
#endif
	if(huart->Instance == USART1){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3f      	ldr	r2, [pc, #252]	; (8001e2c <HAL_UART_TxCpltCallback+0x10c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d165      	bne.n	8001dfe <HAL_UART_TxCpltCallback+0xde>

		memset(&uartSend_Store[0][0],0,uartSend_Store_Count[0]);
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <HAL_UART_TxCpltCallback+0x110>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	2100      	movs	r1, #0
 8001d3a:	483e      	ldr	r0, [pc, #248]	; (8001e34 <HAL_UART_TxCpltCallback+0x114>)
 8001d3c:	f004 f808 	bl	8005d50 <memset>
		uartSend_Store_Count[0] = 0;
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_UART_TxCpltCallback+0x110>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]

		if(uartSend_Store_Size > 0){
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_UART_TxCpltCallback+0x118>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_UART_TxCpltCallback+0x3a>
			uartSend_Store_Size--;
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_UART_TxCpltCallback+0x118>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_UART_TxCpltCallback+0x118>)
 8001d58:	701a      	strb	r2, [r3, #0]
		}

		if(uartSend_Store_Size > 0){
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_UART_TxCpltCallback+0x118>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d040      	beq.n	8001de4 <HAL_UART_TxCpltCallback+0xc4>

			for(int i = 0 ; i < uartSend_Store_Size ; i++){
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e01f      	b.n	8001da8 <HAL_UART_TxCpltCallback+0x88>
				memcpy(&uartSend_Store[i][0],&uartSend_Store[i+1][0],uartSend_Store_Count[i+1]);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2232      	movs	r2, #50	; 0x32
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_UART_TxCpltCallback+0x114>)
 8001d72:	1898      	adds	r0, r3, r2
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	2232      	movs	r2, #50	; 0x32
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_UART_TxCpltCallback+0x114>)
 8001d80:	1899      	adds	r1, r3, r2
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <HAL_UART_TxCpltCallback+0x110>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f003 ffd2 	bl	8005d34 <memcpy>
				uartSend_Store_Count[i] = uartSend_Store_Count[i+1];
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_UART_TxCpltCallback+0x110>)
 8001d96:	5cd1      	ldrb	r1, [r2, r3]
 8001d98:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <HAL_UART_TxCpltCallback+0x110>)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	460a      	mov	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
			for(int i = 0 ; i < uartSend_Store_Size ; i++){
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_UART_TxCpltCallback+0x118>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	dbd9      	blt.n	8001d68 <HAL_UART_TxCpltCallback+0x48>
			}
			uint8_t uart_error;
			uart_error = HAL_UART_Transmit_DMA(&huart1, &uartSend_Store[0][0], uartSend_Store_Count[0]);
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_UART_TxCpltCallback+0x110>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	491d      	ldr	r1, [pc, #116]	; (8001e34 <HAL_UART_TxCpltCallback+0x114>)
 8001dbe:	481f      	ldr	r0, [pc, #124]	; (8001e3c <HAL_UART_TxCpltCallback+0x11c>)
 8001dc0:	f003 f980 	bl	80050c4 <HAL_UART_Transmit_DMA>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	72fb      	strb	r3, [r7, #11]
			if((uart_error == HAL_BUSY) || (uart_error == HAL_ERROR)){
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d002      	beq.n	8001dd4 <HAL_UART_TxCpltCallback+0xb4>
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_UART_TxCpltCallback+0xc4>
				flag_send_uart =1;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_UART_TxCpltCallback+0x120>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
				time_send_uart = HAL_GetTick();
 8001dda:	f000 fd1b 	bl	8002814 <HAL_GetTick>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_UART_TxCpltCallback+0x124>)
 8001de2:	6013      	str	r3, [r2, #0]
			}

		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uartReciver_buffer, UARTRX_BUFF_SIZE);
 8001de4:	2232      	movs	r2, #50	; 0x32
 8001de6:	4918      	ldr	r1, [pc, #96]	; (8001e48 <HAL_UART_TxCpltCallback+0x128>)
 8001de8:	4814      	ldr	r0, [pc, #80]	; (8001e3c <HAL_UART_TxCpltCallback+0x11c>)
 8001dea:	f003 f9d7 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_UART_TxCpltCallback+0x12c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_TxCpltCallback+0x12c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0204 	bic.w	r2, r2, #4
 8001dfc:	601a      	str	r2, [r3, #0]

	}
#ifdef DMA
	if(huart->Instance == USART2){
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_UART_TxCpltCallback+0x130>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10c      	bne.n	8001e22 <HAL_UART_TxCpltCallback+0x102>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartReciver_rs485, 30);
 8001e08:	221e      	movs	r2, #30
 8001e0a:	4912      	ldr	r1, [pc, #72]	; (8001e54 <HAL_UART_TxCpltCallback+0x134>)
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <HAL_UART_TxCpltCallback+0x138>)
 8001e0e:	f003 f9c5 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_UART_TxCpltCallback+0x13c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_UART_TxCpltCallback+0x13c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0204 	bic.w	r2, r2, #4
 8001e20:	601a      	str	r2, [r3, #0]
	}
#endif
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	20000330 	.word	0x20000330
 8001e34:	20000234 	.word	0x20000234
 8001e38:	20000335 	.word	0x20000335
 8001e3c:	20001fa0 	.word	0x20001fa0
 8001e40:	20000336 	.word	0x20000336
 8001e44:	20000338 	.word	0x20000338
 8001e48:	20000d38 	.word	0x20000d38
 8001e4c:	2000206c 	.word	0x2000206c
 8001e50:	40004400 	.word	0x40004400
 8001e54:	20001e84 	.word	0x20001e84
 8001e58:	20001fe4 	.word	0x20001fe4
 8001e5c:	200020b0 	.word	0x200020b0

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e66:	f000 fc7d 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6a:	f000 f84b 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6e:	f000 f977 	bl	8002160 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e72:	f000 f93f 	bl	80020f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e76:	f000 f88d 	bl	8001f94 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e7a:	f000 f8b9 	bl	8001ff0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001e7e:	f000 f8e5 	bl	800204c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e82:	f000 f90d 	bl	80020a0 <MX_USART2_UART_Init>
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  build_crc16_table();
 8001e86:	f7fe f961 	bl	800014c <build_crc16_table>
  uint16_t CRC_txdata = CRC16((uint8_t*)v,3);
  	rx_buffer[3]= (CRC_txdata&0xFF);
  	rx_buffer[4]= ((CRC_txdata>>8)&0xFF);
  	HAL_UART_Transmit(&huart1, v, 5, 300);
#endif
  HAL_I2C_Master_Transmit(&hi2c1,address_PCF8575<<1,(uint8_t*)reset_digital,2,30);
 8001e8a:	231e      	movs	r3, #30
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2302      	movs	r3, #2
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <main+0x80>)
 8001e92:	2140      	movs	r1, #64	; 0x40
 8001e94:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <main+0x84>)
 8001e96:	f001 fc63 	bl	8003760 <HAL_I2C_Master_Transmit>
  HAL_GPIO_WritePin(Tx_Rx_EN_GPIO_Port, Tx_Rx_EN_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <main+0x88>)
 8001ea0:	f001 fad2 	bl	8003448 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uartReciver_buffer, UARTRX_BUFF_SIZE);
 8001ea4:	2232      	movs	r2, #50	; 0x32
 8001ea6:	4911      	ldr	r1, [pc, #68]	; (8001eec <main+0x8c>)
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <main+0x90>)
 8001eaa:	f003 f977 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <main+0x94>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <main+0x94>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0204 	bic.w	r2, r2, #4
 8001ebc:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartReciver_rs485, 30);
 8001ebe:	221e      	movs	r2, #30
 8001ec0:	490d      	ldr	r1, [pc, #52]	; (8001ef8 <main+0x98>)
 8001ec2:	480e      	ldr	r0, [pc, #56]	; (8001efc <main+0x9c>)
 8001ec4:	f003 f96a 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <main+0xa0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <main+0xa0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001ed8:	f7fe fad8 	bl	800048c <loop>
 8001edc:	e7fc      	b.n	8001ed8 <main+0x78>
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20001ef8 	.word	0x20001ef8
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	20001ea4 	.word	0x20001ea4
 8001ef0:	20001fa0 	.word	0x20001fa0
 8001ef4:	2000206c 	.word	0x2000206c
 8001ef8:	20001ed8 	.word	0x20001ed8
 8001efc:	20001fe4 	.word	0x20001fe4
 8001f00:	200020b0 	.word	0x200020b0

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b090      	sub	sp, #64	; 0x40
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 0318 	add.w	r3, r7, #24
 8001f0e:	2228      	movs	r2, #40	; 0x28
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 ff1c 	bl	8005d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f26:	2309      	movs	r3, #9
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fbbd 	bl	80046d0 <HAL_RCC_OscConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001f5c:	f000 f956 	bl	800220c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f60:	230f      	movs	r3, #15
 8001f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f64:	2302      	movs	r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fe2a 	bl	8004bd4 <HAL_RCC_ClockConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001f86:	f000 f941 	bl	800220c <Error_Handler>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3740      	adds	r7, #64	; 0x40
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <MX_I2C1_Init+0x54>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_I2C1_Init+0x58>)
 8001fa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fd2:	f001 fa51 	bl	8003478 <HAL_I2C_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fdc:	f000 f916 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20001ef8 	.word	0x20001ef8
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	000186a0 	.word	0x000186a0

08001ff0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_I2C2_Init+0x50>)
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <MX_I2C2_Init+0x54>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_I2C2_Init+0x50>)
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_I2C2_Init+0x58>)
 8001ffe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_I2C2_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_I2C2_Init+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_I2C2_Init+0x50>)
 800200e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002012:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_I2C2_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_I2C2_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_I2C2_Init+0x50>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_I2C2_Init+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_I2C2_Init+0x50>)
 800202e:	f001 fa23 	bl	8003478 <HAL_I2C_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002038:	f000 f8e8 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20001f4c 	.word	0x20001f4c
 8002044:	40005800 	.word	0x40005800
 8002048:	000186a0 	.word	0x000186a0

0800204c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_USART1_UART_Init+0x50>)
 8002054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_USART1_UART_Init+0x4c>)
 8002084:	f002 ff3e 	bl	8004f04 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800208e:	f000 f8bd 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20001fa0 	.word	0x20001fa0
 800209c:	40013800 	.word	0x40013800

080020a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_USART2_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART2_UART_Init+0x4c>)
 80020d8:	f002 ff14 	bl	8004f04 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 f893 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20001fe4 	.word	0x20001fe4
 80020f0:	40004400 	.word	0x40004400

080020f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_DMA_Init+0x68>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <MX_DMA_Init+0x68>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <MX_DMA_Init+0x68>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2102      	movs	r1, #2
 8002116:	200e      	movs	r0, #14
 8002118:	f000 fc81 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800211c:	200e      	movs	r0, #14
 800211e:	f000 fc9a 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2102      	movs	r1, #2
 8002126:	200f      	movs	r0, #15
 8002128:	f000 fc79 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800212c:	200f      	movs	r0, #15
 800212e:	f000 fc92 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2010      	movs	r0, #16
 8002138:	f000 fc71 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800213c:	2010      	movs	r0, #16
 800213e:	f000 fc8a 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2011      	movs	r0, #17
 8002148:	f000 fc69 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800214c:	2011      	movs	r0, #17
 800214e:	f000 fc82 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <MX_GPIO_Init+0xa4>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <MX_GPIO_Init+0xa4>)
 800217a:	f043 0310 	orr.w	r3, r3, #16
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <MX_GPIO_Init+0xa4>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <MX_GPIO_Init+0xa4>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <MX_GPIO_Init+0xa4>)
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_GPIO_Init+0xa4>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_GPIO_Init+0xa4>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <MX_GPIO_Init+0xa4>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_GPIO_Init+0xa4>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_GPIO_Init+0xa4>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <MX_GPIO_Init+0xa4>)
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_GPIO_Init+0xa4>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Tx_Rx_EN_GPIO_Port, Tx_Rx_EN_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2110      	movs	r1, #16
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <MX_GPIO_Init+0xa8>)
 80021da:	f001 f935 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Tx_Rx_EN_Pin */
  GPIO_InitStruct.Pin = Tx_Rx_EN_Pin;
 80021de:	2310      	movs	r3, #16
 80021e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tx_Rx_EN_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	4619      	mov	r1, r3
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_GPIO_Init+0xa8>)
 80021f6:	f000 fee7 	bl	8002fc8 <HAL_GPIO_Init>

}
 80021fa:	bf00      	nop
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40010800 	.word	0x40010800

0800220c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002214:	e7fe      	b.n	8002214 <Error_Handler+0x8>
	...

08002218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_MspInit+0x5c>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_MspInit+0x5c>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6193      	str	r3, [r2, #24]
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_MspInit+0x5c>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_MspInit+0x5c>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_MspInit+0x5c>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_MspInit+0x5c>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_MspInit+0x60>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_MspInit+0x60>)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000

0800227c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d124      	bne.n	80022e6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022b4:	23c0      	movs	r3, #192	; 0xc0
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b8:	2312      	movs	r3, #18
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 0318 	add.w	r3, r7, #24
 80022c4:	4619      	mov	r1, r3
 80022c6:	4821      	ldr	r0, [pc, #132]	; (800234c <HAL_I2C_MspInit+0xd0>)
 80022c8:	f000 fe7e 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022e4:	e029      	b.n	800233a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_I2C_MspInit+0xd4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d124      	bne.n	800233a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002308:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800230e:	2312      	movs	r3, #18
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0318 	add.w	r3, r7, #24
 800231a:	4619      	mov	r1, r3
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <HAL_I2C_MspInit+0xd0>)
 800231e:	f000 fe53 	bl	8002fc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40005400 	.word	0x40005400
 8002348:	40021000 	.word	0x40021000
 800234c:	40010c00 	.word	0x40010c00
 8002350:	40005800 	.word	0x40005800

08002354 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_I2C_MspDeInit+0x64>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10e      	bne.n	8002384 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_I2C_MspDeInit+0x68>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_I2C_MspDeInit+0x68>)
 800236c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002370:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002372:	2140      	movs	r1, #64	; 0x40
 8002374:	4812      	ldr	r0, [pc, #72]	; (80023c0 <HAL_I2C_MspDeInit+0x6c>)
 8002376:	f000 ffab 	bl	80032d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	4810      	ldr	r0, [pc, #64]	; (80023c0 <HAL_I2C_MspDeInit+0x6c>)
 800237e:	f000 ffa7 	bl	80032d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002382:	e014      	b.n	80023ae <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_I2C_MspDeInit+0x70>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10f      	bne.n	80023ae <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_I2C_MspDeInit+0x68>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_I2C_MspDeInit+0x68>)
 8002394:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002398:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800239a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <HAL_I2C_MspDeInit+0x6c>)
 80023a0:	f000 ff96 	bl	80032d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80023a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HAL_I2C_MspDeInit+0x6c>)
 80023aa:	f000 ff91 	bl	80032d0 <HAL_GPIO_DeInit>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40005400 	.word	0x40005400
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	40005800 	.word	0x40005800

080023c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a8c      	ldr	r2, [pc, #560]	; (8002614 <HAL_UART_MspInit+0x24c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f040 8087 	bne.w	80024f8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ea:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <HAL_UART_MspInit+0x250>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4a8a      	ldr	r2, [pc, #552]	; (8002618 <HAL_UART_MspInit+0x250>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6193      	str	r3, [r2, #24]
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_UART_MspInit+0x250>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b85      	ldr	r3, [pc, #532]	; (8002618 <HAL_UART_MspInit+0x250>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	4a84      	ldr	r2, [pc, #528]	; (8002618 <HAL_UART_MspInit+0x250>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6193      	str	r3, [r2, #24]
 800240e:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_UART_MspInit+0x250>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	4619      	mov	r1, r3
 800242e:	487b      	ldr	r0, [pc, #492]	; (800261c <HAL_UART_MspInit+0x254>)
 8002430:	f000 fdca 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0318 	add.w	r3, r7, #24
 8002446:	4619      	mov	r1, r3
 8002448:	4874      	ldr	r0, [pc, #464]	; (800261c <HAL_UART_MspInit+0x254>)
 800244a:	f000 fdbd 	bl	8002fc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800244e:	4b74      	ldr	r3, [pc, #464]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002450:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_UART_MspInit+0x25c>)
 8002452:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002454:	4b72      	ldr	r3, [pc, #456]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002456:	2210      	movs	r2, #16
 8002458:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <HAL_UART_MspInit+0x258>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002466:	4b6e      	ldr	r3, [pc, #440]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800246c:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_UART_MspInit+0x258>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002472:	4b6b      	ldr	r3, [pc, #428]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002478:	4b69      	ldr	r3, [pc, #420]	; (8002620 <HAL_UART_MspInit+0x258>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800247e:	4868      	ldr	r0, [pc, #416]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002480:	f000 fb04 	bl	8002a8c <HAL_DMA_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800248a:	f7ff febf 	bl	800220c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a63      	ldr	r2, [pc, #396]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002492:	635a      	str	r2, [r3, #52]	; 0x34
 8002494:	4a62      	ldr	r2, [pc, #392]	; (8002620 <HAL_UART_MspInit+0x258>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_UART_MspInit+0x260>)
 800249c:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_UART_MspInit+0x264>)
 800249e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b60      	ldr	r3, [pc, #384]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b8:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024be:	4b5a      	ldr	r3, [pc, #360]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ca:	4857      	ldr	r0, [pc, #348]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024cc:	f000 fade 	bl	8002a8c <HAL_DMA_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80024d6:	f7ff fe99 	bl	800220c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
 80024e0:	4a51      	ldr	r2, [pc, #324]	; (8002628 <HAL_UART_MspInit+0x260>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2102      	movs	r1, #2
 80024ea:	2025      	movs	r0, #37	; 0x25
 80024ec:	f000 fa97 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024f0:	2025      	movs	r0, #37	; 0x25
 80024f2:	f000 fab0 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024f6:	e089      	b.n	800260c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_UART_MspInit+0x268>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	f040 8084 	bne.w	800260c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_UART_MspInit+0x250>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	4a43      	ldr	r2, [pc, #268]	; (8002618 <HAL_UART_MspInit+0x250>)
 800250a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250e:	61d3      	str	r3, [r2, #28]
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_UART_MspInit+0x250>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_UART_MspInit+0x250>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <HAL_UART_MspInit+0x250>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_UART_MspInit+0x250>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002534:	2304      	movs	r3, #4
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0318 	add.w	r3, r7, #24
 8002544:	4619      	mov	r1, r3
 8002546:	4835      	ldr	r0, [pc, #212]	; (800261c <HAL_UART_MspInit+0x254>)
 8002548:	f000 fd3e 	bl	8002fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800254c:	2308      	movs	r3, #8
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	4619      	mov	r1, r3
 800255e:	482f      	ldr	r0, [pc, #188]	; (800261c <HAL_UART_MspInit+0x254>)
 8002560:	f000 fd32 	bl	8002fc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_UART_MspInit+0x26c>)
 8002566:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_UART_MspInit+0x270>)
 8002568:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_UART_MspInit+0x26c>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_UART_MspInit+0x26c>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_UART_MspInit+0x26c>)
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_UART_MspInit+0x26c>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_UART_MspInit+0x26c>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_UART_MspInit+0x26c>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_UART_MspInit+0x26c>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002594:	4827      	ldr	r0, [pc, #156]	; (8002634 <HAL_UART_MspInit+0x26c>)
 8002596:	f000 fa79 	bl	8002a8c <HAL_DMA_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80025a0:	f7ff fe34 	bl	800220c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_UART_MspInit+0x26c>)
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_UART_MspInit+0x26c>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_UART_MspInit+0x274>)
 80025b2:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_UART_MspInit+0x278>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_UART_MspInit+0x274>)
 80025b8:	2210      	movs	r2, #16
 80025ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_UART_MspInit+0x274>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_UART_MspInit+0x274>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_UART_MspInit+0x274>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_UART_MspInit+0x274>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_UART_MspInit+0x274>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_UART_MspInit+0x274>)
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025e0:	4816      	ldr	r0, [pc, #88]	; (800263c <HAL_UART_MspInit+0x274>)
 80025e2:	f000 fa53 	bl	8002a8c <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80025ec:	f7ff fe0e 	bl	800220c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_UART_MspInit+0x274>)
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_UART_MspInit+0x274>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	2026      	movs	r0, #38	; 0x26
 8002602:	f000 fa0c 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002606:	2026      	movs	r0, #38	; 0x26
 8002608:	f000 fa25 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013800 	.word	0x40013800
 8002618:	40021000 	.word	0x40021000
 800261c:	40010800 	.word	0x40010800
 8002620:	20002028 	.word	0x20002028
 8002624:	40020044 	.word	0x40020044
 8002628:	2000206c 	.word	0x2000206c
 800262c:	40020058 	.word	0x40020058
 8002630:	40004400 	.word	0x40004400
 8002634:	200020b0 	.word	0x200020b0
 8002638:	4002006c 	.word	0x4002006c
 800263c:	200020f4 	.word	0x200020f4
 8002640:	40020080 	.word	0x40020080

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <NMI_Handler+0x4>

0800264a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <HardFault_Handler+0x4>

08002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <MemManage_Handler+0x4>

08002656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <BusFault_Handler+0x4>

0800265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <UsageFault_Handler+0x4>

08002662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268a:	f000 f8b1 	bl	80027f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <DMA1_Channel4_IRQHandler+0x10>)
 800269a:	f000 fb61 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20002028 	.word	0x20002028

080026a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <DMA1_Channel5_IRQHandler+0x10>)
 80026ae:	f000 fb57 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000206c 	.word	0x2000206c

080026bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <DMA1_Channel6_IRQHandler+0x10>)
 80026c2:	f000 fb4d 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200020b0 	.word	0x200020b0

080026d0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <DMA1_Channel7_IRQHandler+0x10>)
 80026d6:	f000 fb43 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200020f4 	.word	0x200020f4

080026e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <USART1_IRQHandler+0x10>)
 80026ea:	f002 fda7 	bl	800523c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20001fa0 	.word	0x20001fa0

080026f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <USART2_IRQHandler+0x10>)
 80026fe:	f002 fd9d 	bl	800523c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20001fe4 	.word	0x20001fe4

0800270c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	; (8002750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	; (800275c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800273e:	f7ff ffe5 	bl	800270c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002742:	f003 fad3 	bl	8005cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002746:	f7ff fb8b 	bl	8001e60 <main>
  bx lr
 800274a:	4770      	bx	lr
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002754:	08005db4 	.word	0x08005db4
  ldr r2, =_sbss
 8002758:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800275c:	2000213c 	.word	0x2000213c

08002760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC1_2_IRQHandler>
	...

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_Init+0x28>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_Init+0x28>)
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002774:	2003      	movs	r0, #3
 8002776:	f000 f947 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277a:	200a      	movs	r0, #10
 800277c:	f000 f808 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002780:	f7ff fd4a 	bl	8002218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_InitTick+0x54>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_InitTick+0x58>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f95f 	bl	8002a72 <HAL_SYSTICK_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00e      	b.n	80027dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d80a      	bhi.n	80027da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c4:	2200      	movs	r2, #0
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f000 f927 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <HAL_InitTick+0x5c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000000c 	.word	0x2000000c
 80027e8:	20000014 	.word	0x20000014
 80027ec:	20000010 	.word	0x20000010

080027f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_IncTick+0x1c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x20>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_IncTick+0x20>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000014 	.word	0x20000014
 8002810:	20002138 	.word	0x20002138

08002814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return uwTick;
 8002818:	4b02      	ldr	r3, [pc, #8]	; (8002824 <HAL_GetTick+0x10>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20002138 	.word	0x20002138

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff fff0 	bl	8002814 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffe0 	bl	8002814 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000014 	.word	0x20000014

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	; (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7ff ff90 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff2d 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff42 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff90 	bl	8002960 <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5f 	bl	800290c <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff35 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa2 	bl	80029c4 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e043      	b.n	8002b2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_DMA_Init+0xa8>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_DMA_Init+0xac>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	009a      	lsls	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_DMA_Init+0xb0>)
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	bffdfff8 	.word	0xbffdfff8
 8002b38:	cccccccd 	.word	0xcccccccd
 8002b3c:	40020000 	.word	0x40020000

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Start_IT+0x20>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e04a      	b.n	8002bf6 <HAL_DMA_Start_IT+0xb6>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d13a      	bne.n	8002be8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f9e8 	bl	8002f6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 020e 	orr.w	r2, r2, #14
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e00f      	b.n	8002bd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0204 	bic.w	r2, r2, #4
 8002bc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 020a 	orr.w	r2, r2, #10
 8002bd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e005      	b.n	8002bf4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d008      	beq.n	8002c26 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2204      	movs	r2, #4
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e020      	b.n	8002c68 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 020e 	bic.w	r2, r2, #14
 8002c34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d005      	beq.n	8002c96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e051      	b.n	8002d3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020e 	bic.w	r2, r2, #14
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMA_Abort_IT+0xd0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d029      	beq.n	8002d14 <HAL_DMA_Abort_IT+0xa0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_DMA_Abort_IT+0xd4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x9c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_DMA_Abort_IT+0xd8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01a      	beq.n	8002d0a <HAL_DMA_Abort_IT+0x96>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_DMA_Abort_IT+0xdc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d012      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x90>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_DMA_Abort_IT+0xe0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00a      	beq.n	8002cfe <HAL_DMA_Abort_IT+0x8a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_DMA_Abort_IT+0xe4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d102      	bne.n	8002cf8 <HAL_DMA_Abort_IT+0x84>
 8002cf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cf6:	e00e      	b.n	8002d16 <HAL_DMA_Abort_IT+0xa2>
 8002cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cfc:	e00b      	b.n	8002d16 <HAL_DMA_Abort_IT+0xa2>
 8002cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d02:	e008      	b.n	8002d16 <HAL_DMA_Abort_IT+0xa2>
 8002d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d08:	e005      	b.n	8002d16 <HAL_DMA_Abort_IT+0xa2>
 8002d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d0e:	e002      	b.n	8002d16 <HAL_DMA_Abort_IT+0xa2>
 8002d10:	2310      	movs	r3, #16
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_Abort_IT+0xa2>
 8002d14:	2301      	movs	r3, #1
 8002d16:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <HAL_DMA_Abort_IT+0xe8>)
 8002d18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
    } 
  }
  return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40020008 	.word	0x40020008
 8002d48:	4002001c 	.word	0x4002001c
 8002d4c:	40020030 	.word	0x40020030
 8002d50:	40020044 	.word	0x40020044
 8002d54:	40020058 	.word	0x40020058
 8002d58:	4002006c 	.word	0x4002006c
 8002d5c:	40020000 	.word	0x40020000

08002d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d04f      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xc8>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d04a      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <HAL_DMA_IRQHandler+0x1f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d029      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xae>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_DMA_IRQHandler+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xaa>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a63      	ldr	r2, [pc, #396]	; (8002f58 <HAL_DMA_IRQHandler+0x1f8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0xa4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a62      	ldr	r2, [pc, #392]	; (8002f5c <HAL_DMA_IRQHandler+0x1fc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d012      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x9e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a60      	ldr	r2, [pc, #384]	; (8002f60 <HAL_DMA_IRQHandler+0x200>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00a      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x98>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a5f      	ldr	r2, [pc, #380]	; (8002f64 <HAL_DMA_IRQHandler+0x204>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d102      	bne.n	8002df2 <HAL_DMA_IRQHandler+0x92>
 8002dec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002df0:	e00e      	b.n	8002e10 <HAL_DMA_IRQHandler+0xb0>
 8002df2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002df6:	e00b      	b.n	8002e10 <HAL_DMA_IRQHandler+0xb0>
 8002df8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dfc:	e008      	b.n	8002e10 <HAL_DMA_IRQHandler+0xb0>
 8002dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e02:	e005      	b.n	8002e10 <HAL_DMA_IRQHandler+0xb0>
 8002e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e08:	e002      	b.n	8002e10 <HAL_DMA_IRQHandler+0xb0>
 8002e0a:	2340      	movs	r3, #64	; 0x40
 8002e0c:	e000      	b.n	8002e10 <HAL_DMA_IRQHandler+0xb0>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	4a55      	ldr	r2, [pc, #340]	; (8002f68 <HAL_DMA_IRQHandler+0x208>)
 8002e12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8094 	beq.w	8002f46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	e08e      	b.n	8002f46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d056      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x186>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d051      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 020a 	bic.w	r2, r2, #10
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <HAL_DMA_IRQHandler+0x1f0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d029      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x166>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a37      	ldr	r2, [pc, #220]	; (8002f54 <HAL_DMA_IRQHandler+0x1f4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x162>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <HAL_DMA_IRQHandler+0x1f8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x15c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_DMA_IRQHandler+0x1fc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d012      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x156>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <HAL_DMA_IRQHandler+0x200>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00a      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x150>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <HAL_DMA_IRQHandler+0x204>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d102      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x14a>
 8002ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ea8:	e00e      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eae:	e00b      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
 8002eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb4:	e008      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
 8002eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eba:	e005      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
 8002ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec0:	e002      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_DMA_IRQHandler+0x208>)
 8002eca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d034      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ee4:	e02f      	b.n	8002f46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2208      	movs	r2, #8
 8002eec:	409a      	lsls	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d028      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x1e8>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 020e 	bic.w	r2, r2, #14
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d004      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
    }
  }
  return;
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
}
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40020008 	.word	0x40020008
 8002f54:	4002001c 	.word	0x4002001c
 8002f58:	40020030 	.word	0x40020030
 8002f5c:	40020044 	.word	0x40020044
 8002f60:	40020058 	.word	0x40020058
 8002f64:	4002006c 	.word	0x4002006c
 8002f68:	40020000 	.word	0x40020000

08002f6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d108      	bne.n	8002fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002faa:	e007      	b.n	8002fbc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	e169      	b.n	80032b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8158 	bne.w	80032aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a9a      	ldr	r2, [pc, #616]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003004:	4a98      	ldr	r2, [pc, #608]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d875      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800300a:	4a98      	ldr	r2, [pc, #608]	; (800326c <HAL_GPIO_Init+0x2a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d058      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003010:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_GPIO_Init+0x2a4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d86f      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003016:	4a96      	ldr	r2, [pc, #600]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d052      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 800301c:	4a94      	ldr	r2, [pc, #592]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d869      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04c      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003028:	4a92      	ldr	r2, [pc, #584]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d863      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800302e:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d046      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003034:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d85d      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800303a:	2b12      	cmp	r3, #18
 800303c:	d82a      	bhi.n	8003094 <HAL_GPIO_Init+0xcc>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d859      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_GPIO_Init+0x80>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	080030c3 	.word	0x080030c3
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080030af 	.word	0x080030af
 8003054:	080030f1 	.word	0x080030f1
 8003058:	080030f7 	.word	0x080030f7
 800305c:	080030f7 	.word	0x080030f7
 8003060:	080030f7 	.word	0x080030f7
 8003064:	080030f7 	.word	0x080030f7
 8003068:	080030f7 	.word	0x080030f7
 800306c:	080030f7 	.word	0x080030f7
 8003070:	080030f7 	.word	0x080030f7
 8003074:	080030f7 	.word	0x080030f7
 8003078:	080030f7 	.word	0x080030f7
 800307c:	080030f7 	.word	0x080030f7
 8003080:	080030f7 	.word	0x080030f7
 8003084:	080030f7 	.word	0x080030f7
 8003088:	080030f7 	.word	0x080030f7
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030b9 	.word	0x080030b9
 8003094:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_GPIO_Init+0x2b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309a:	e02c      	b.n	80030f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e029      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e024      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e01f      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	330c      	adds	r3, #12
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e01a      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ca:	2304      	movs	r3, #4
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e013      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d8:	2308      	movs	r3, #8
 80030da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	611a      	str	r2, [r3, #16]
          break;
 80030e2:	e009      	b.n	80030f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e4:	2308      	movs	r3, #8
 80030e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	615a      	str	r2, [r3, #20]
          break;
 80030ee:	e003      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          break;
 80030f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d801      	bhi.n	8003102 <HAL_GPIO_Init+0x13a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_Init+0x13e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d802      	bhi.n	8003114 <HAL_GPIO_Init+0x14c>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	e002      	b.n	800311a <HAL_GPIO_Init+0x152>
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	3b08      	subs	r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	210f      	movs	r1, #15
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80b1 	beq.w	80032aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a4c      	ldr	r2, [pc, #304]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_GPIO_Init+0x2c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_GPIO_Init+0x2c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00d      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <HAL_GPIO_Init+0x2c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3d      	ldr	r2, [pc, #244]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_GPIO_Init+0x1e0>
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e004      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b4:	2300      	movs	r3, #0
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	f002 0203 	and.w	r2, r2, #3
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	4093      	lsls	r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c6:	492f      	ldr	r1, [pc, #188]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	492c      	ldr	r1, [pc, #176]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4928      	ldr	r1, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	491e      	ldr	r1, [pc, #120]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4918      	ldr	r1, [pc, #96]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	4914      	ldr	r1, [pc, #80]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
 8003264:	e021      	b.n	80032aa <HAL_GPIO_Init+0x2e2>
 8003266:	bf00      	nop
 8003268:	10320000 	.word	0x10320000
 800326c:	10310000 	.word	0x10310000
 8003270:	10220000 	.word	0x10220000
 8003274:	10210000 	.word	0x10210000
 8003278:	10120000 	.word	0x10120000
 800327c:	10110000 	.word	0x10110000
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	40010800 	.word	0x40010800
 800328c:	40010c00 	.word	0x40010c00
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_GPIO_Init+0x304>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4909      	ldr	r1, [pc, #36]	; (80032cc <HAL_GPIO_Init+0x304>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f ae8e 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	372c      	adds	r7, #44	; 0x2c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80032de:	e09a      	b.n	8003416 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 808d 	beq.w	8003410 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80032f6:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <HAL_GPIO_DeInit+0x160>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_GPIO_DeInit+0x164>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_GPIO_DeInit+0x78>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a45      	ldr	r2, [pc, #276]	; (8003438 <HAL_GPIO_DeInit+0x168>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_DeInit+0x74>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_GPIO_DeInit+0x16c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_DeInit+0x70>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_GPIO_DeInit+0x170>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_DeInit+0x6c>
 8003338:	2303      	movs	r3, #3
 800333a:	e006      	b.n	800334a <HAL_GPIO_DeInit+0x7a>
 800333c:	2304      	movs	r3, #4
 800333e:	e004      	b.n	800334a <HAL_GPIO_DeInit+0x7a>
 8003340:	2302      	movs	r3, #2
 8003342:	e002      	b.n	800334a <HAL_GPIO_DeInit+0x7a>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_GPIO_DeInit+0x7a>
 8003348:	2300      	movs	r3, #0
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d132      	bne.n	80033c0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	220f      	movs	r2, #15
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800336a:	4a31      	ldr	r2, [pc, #196]	; (8003430 <HAL_GPIO_DeInit+0x160>)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	43da      	mvns	r2, r3
 800337a:	482d      	ldr	r0, [pc, #180]	; (8003430 <HAL_GPIO_DeInit+0x160>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	400a      	ands	r2, r1
 8003382:	3302      	adds	r3, #2
 8003384:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003388:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	43db      	mvns	r3, r3
 8003390:	492c      	ldr	r1, [pc, #176]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 8003392:	4013      	ands	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	4929      	ldr	r1, [pc, #164]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4925      	ldr	r1, [pc, #148]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_GPIO_DeInit+0x174>)
 80033bc:	4013      	ands	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d801      	bhi.n	80033ca <HAL_GPIO_DeInit+0xfa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	e001      	b.n	80033ce <HAL_GPIO_DeInit+0xfe>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2bff      	cmp	r3, #255	; 0xff
 80033d4:	d802      	bhi.n	80033dc <HAL_GPIO_DeInit+0x10c>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	e002      	b.n	80033e2 <HAL_GPIO_DeInit+0x112>
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3b08      	subs	r3, #8
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	210f      	movs	r1, #15
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	401a      	ands	r2, r3
 80033f4:	2104      	movs	r1, #4
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	f47f af5e 	bne.w	80032e0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40010000 	.word	0x40010000
 8003434:	40010800 	.word	0x40010800
 8003438:	40010c00 	.word	0x40010c00
 800343c:	40011000 	.word	0x40011000
 8003440:	40011400 	.word	0x40011400
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003464:	e003      	b.n	800346e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e12b      	b.n	80036e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe feec 	bl	800227c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034dc:	f001 fccc 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80034e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4a81      	ldr	r2, [pc, #516]	; (80036ec <HAL_I2C_Init+0x274>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d807      	bhi.n	80034fc <HAL_I2C_Init+0x84>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a80      	ldr	r2, [pc, #512]	; (80036f0 <HAL_I2C_Init+0x278>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e006      	b.n	800350a <HAL_I2C_Init+0x92>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a7d      	ldr	r2, [pc, #500]	; (80036f4 <HAL_I2C_Init+0x27c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0e7      	b.n	80036e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a78      	ldr	r2, [pc, #480]	; (80036f8 <HAL_I2C_Init+0x280>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0c9b      	lsrs	r3, r3, #18
 800351c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a6a      	ldr	r2, [pc, #424]	; (80036ec <HAL_I2C_Init+0x274>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d802      	bhi.n	800354c <HAL_I2C_Init+0xd4>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3301      	adds	r3, #1
 800354a:	e009      	b.n	8003560 <HAL_I2C_Init+0xe8>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	4a69      	ldr	r2, [pc, #420]	; (80036fc <HAL_I2C_Init+0x284>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	3301      	adds	r3, #1
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	430b      	orrs	r3, r1
 8003566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	495c      	ldr	r1, [pc, #368]	; (80036ec <HAL_I2C_Init+0x274>)
 800357c:	428b      	cmp	r3, r1
 800357e:	d819      	bhi.n	80035b4 <HAL_I2C_Init+0x13c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1e59      	subs	r1, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fbb1 f3f3 	udiv	r3, r1, r3
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003594:	400b      	ands	r3, r1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_I2C_Init+0x138>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1e59      	subs	r1, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ae:	e051      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 80035b0:	2304      	movs	r3, #4
 80035b2:	e04f      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d111      	bne.n	80035e0 <HAL_I2C_Init+0x168>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e58      	subs	r0, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e012      	b.n	8003606 <HAL_I2C_Init+0x18e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e58      	subs	r0, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	0099      	lsls	r1, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Init+0x196>
 800360a:	2301      	movs	r3, #1
 800360c:	e022      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10e      	bne.n	8003634 <HAL_I2C_Init+0x1bc>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1e58      	subs	r0, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	440b      	add	r3, r1
 8003624:	fbb0 f3f3 	udiv	r3, r0, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003632:	e00f      	b.n	8003654 <HAL_I2C_Init+0x1dc>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	0099      	lsls	r1, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	fbb0 f3f3 	udiv	r3, r0, r3
 800364a:	3301      	adds	r3, #1
 800364c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	6809      	ldr	r1, [r1, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6911      	ldr	r1, [r2, #16]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	430b      	orrs	r3, r1
 8003696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	000186a0 	.word	0x000186a0
 80036f0:	001e847f 	.word	0x001e847f
 80036f4:	003d08ff 	.word	0x003d08ff
 80036f8:	431bde83 	.word	0x431bde83
 80036fc:	10624dd3 	.word	0x10624dd3

08003700 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e021      	b.n	8003756 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2224      	movs	r2, #36	; 0x24
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fe12 	bl	8002354 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	460b      	mov	r3, r1
 800376e:	817b      	strh	r3, [r7, #10]
 8003770:	4613      	mov	r3, r2
 8003772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff f84e 	bl	8002814 <HAL_GetTick>
 8003778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	f040 80e0 	bne.w	8003948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	4970      	ldr	r1, [pc, #448]	; (8003954 <HAL_I2C_Master_Transmit+0x1f4>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fdc0 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	e0d3      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_I2C_Master_Transmit+0x50>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e0cc      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d007      	beq.n	80037d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2221      	movs	r2, #33	; 0x21
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2210      	movs	r2, #16
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	893a      	ldrh	r2, [r7, #8]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a50      	ldr	r2, [pc, #320]	; (8003958 <HAL_I2C_Master_Transmit+0x1f8>)
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003818:	8979      	ldrh	r1, [r7, #10]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fc2a 	bl	8004078 <I2C_MasterRequestWrite>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e08d      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003844:	e066      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fe3a 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b04      	cmp	r3, #4
 800385c:	d107      	bne.n	800386e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06b      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d11b      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x188>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d017      	beq.n	80038e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	6a39      	ldr	r1, [r7, #32]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fe2a 	bl	8004546 <I2C_WaitOnBTFFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e01a      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d194      	bne.n	8003846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	00100002 	.word	0x00100002
 8003958:	ffff0000 	.word	0xffff0000

0800395c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	461a      	mov	r2, r3
 8003968:	460b      	mov	r3, r1
 800396a:	817b      	strh	r3, [r7, #10]
 800396c:	4613      	mov	r3, r2
 800396e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7fe ff4e 	bl	8002814 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b20      	cmp	r3, #32
 8003984:	f040 823f 	bne.w	8003e06 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2319      	movs	r3, #25
 800398e:	2201      	movs	r2, #1
 8003990:	497f      	ldr	r1, [pc, #508]	; (8003b90 <HAL_I2C_Master_Receive+0x234>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fcc0 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	e232      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_I2C_Master_Receive+0x54>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e22b      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d007      	beq.n	80039d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2222      	movs	r2, #34	; 0x22
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2210      	movs	r2, #16
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	893a      	ldrh	r2, [r7, #8]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a5f      	ldr	r2, [pc, #380]	; (8003b94 <HAL_I2C_Master_Receive+0x238>)
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a18:	8979      	ldrh	r1, [r7, #10]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fbac 	bl	800417c <I2C_MasterRequestRead>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1ec      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d113      	bne.n	8003a5e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e1c0      	b.n	8003de0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d11e      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a76:	b672      	cpsid	i
}
 8003a78:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aa0:	b662      	cpsie	i
}
 8003aa2:	e035      	b.n	8003b10 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11e      	bne.n	8003aea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003abc:	b672      	cpsid	i
}
 8003abe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ae6:	b662      	cpsie	i
}
 8003ae8:	e012      	b.n	8003b10 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b10:	e166      	b.n	8003de0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	f200 811f 	bhi.w	8003d5a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d123      	bne.n	8003b6c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fd4d 	bl	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e167      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b6a:	e139      	b.n	8003de0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d152      	bne.n	8003c1a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4906      	ldr	r1, [pc, #24]	; (8003b98 <HAL_I2C_Master_Receive+0x23c>)
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fbca 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e13c      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
 8003b8e:	bf00      	nop
 8003b90:	00100002 	.word	0x00100002
 8003b94:	ffff0000 	.word	0xffff0000
 8003b98:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b9c:	b672      	cpsid	i
}
 8003b9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003be2:	b662      	cpsie	i
}
 8003be4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c18:	e0e2      	b.n	8003de0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	497b      	ldr	r1, [pc, #492]	; (8003e10 <HAL_I2C_Master_Receive+0x4b4>)
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fb77 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0e9      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c44:	b672      	cpsid	i
}
 8003c46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_I2C_Master_Receive+0x4b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	4a65      	ldr	r2, [pc, #404]	; (8003e18 <HAL_I2C_Master_Receive+0x4bc>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a1a      	lsrs	r2, r3, #8
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d118      	bne.n	8003cd2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc2:	b662      	cpsie	i
}
 8003cc4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e09a      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d1d9      	bne.n	8003c94 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d22:	b662      	cpsie	i
}
 8003d24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d58:	e042      	b.n	8003de0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fc32 	bl	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e04c      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d118      	bne.n	8003de0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f ae94 	bne.w	8003b12 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	00010004 	.word	0x00010004
 8003e14:	2000000c 	.word	0x2000000c
 8003e18:	14f8b589 	.word	0x14f8b589

08003e1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7fe fcf2 	bl	8002814 <HAL_GetTick>
 8003e30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 8111 	bne.w	8004066 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4988      	ldr	r1, [pc, #544]	; (8004070 <HAL_I2C_IsDeviceReady+0x254>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa62 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e104      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_I2C_IsDeviceReady+0x50>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0fd      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d007      	beq.n	8003e92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2224      	movs	r2, #36	; 0x24
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a70      	ldr	r2, [pc, #448]	; (8004074 <HAL_I2C_IsDeviceReady+0x258>)
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fa20 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eec:	d103      	bne.n	8003ef6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0b6      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f0a:	f7fe fc83 	bl	8002814 <HAL_GetTick>
 8003f0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f34:	bf0c      	ite	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	2300      	movne	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f3e:	e025      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fe fc68 	bl	8002814 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <HAL_I2C_IsDeviceReady+0x13a>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22a0      	movs	r2, #160	; 0xa0
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2ba0      	cmp	r3, #160	; 0xa0
 8003f96:	d005      	beq.n	8003fa4 <HAL_I2C_IsDeviceReady+0x188>
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <HAL_I2C_IsDeviceReady+0x188>
 8003f9e:	7dbb      	ldrb	r3, [r7, #22]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0cd      	beq.n	8003f40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d129      	bne.n	800400e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2319      	movs	r3, #25
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4921      	ldr	r1, [pc, #132]	; (8004070 <HAL_I2C_IsDeviceReady+0x254>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f994 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e036      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e02c      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004026:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2319      	movs	r3, #25
 800402e:	2201      	movs	r2, #1
 8004030:	490f      	ldr	r1, [pc, #60]	; (8004070 <HAL_I2C_IsDeviceReady+0x254>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f970 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e012      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3301      	adds	r3, #1
 8004046:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	f4ff af32 	bcc.w	8003eb6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	00100002 	.word	0x00100002
 8004074:	ffff0000 	.word	0xffff0000

08004078 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	460b      	mov	r3, r1
 8004086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d006      	beq.n	80040a2 <I2C_MasterRequestWrite+0x2a>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d003      	beq.n	80040a2 <I2C_MasterRequestWrite+0x2a>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a0:	d108      	bne.n	80040b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e00b      	b.n	80040cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	2b12      	cmp	r3, #18
 80040ba:	d107      	bne.n	80040cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f91d 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	d103      	bne.n	80040fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e035      	b.n	800416c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004108:	d108      	bne.n	800411c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800410a:	897b      	ldrh	r3, [r7, #10]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004118:	611a      	str	r2, [r3, #16]
 800411a:	e01b      	b.n	8004154 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800411c:	897b      	ldrh	r3, [r7, #10]
 800411e:	11db      	asrs	r3, r3, #7
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0306 	and.w	r3, r3, #6
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f063 030f 	orn	r3, r3, #15
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <I2C_MasterRequestWrite+0xfc>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f943 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e010      	b.n	800416c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4907      	ldr	r1, [pc, #28]	; (8004178 <I2C_MasterRequestWrite+0x100>)
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f933 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	00010008 	.word	0x00010008
 8004178:	00010002 	.word	0x00010002

0800417c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	460b      	mov	r3, r1
 800418a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d006      	beq.n	80041b6 <I2C_MasterRequestRead+0x3a>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d003      	beq.n	80041b6 <I2C_MasterRequestRead+0x3a>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e00b      	b.n	80041e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b11      	cmp	r3, #17
 80041ce:	d107      	bne.n	80041e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f893 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004206:	d103      	bne.n	8004210 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e079      	b.n	8004308 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421c:	d108      	bne.n	8004230 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	e05f      	b.n	80042f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004230:	897b      	ldrh	r3, [r7, #10]
 8004232:	11db      	asrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f063 030f 	orn	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4930      	ldr	r1, [pc, #192]	; (8004310 <I2C_MasterRequestRead+0x194>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8b9 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e054      	b.n	8004308 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4929      	ldr	r1, [pc, #164]	; (8004314 <I2C_MasterRequestRead+0x198>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8a9 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e044      	b.n	8004308 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f831 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ca:	d103      	bne.n	80042d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e017      	b.n	8004308 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	11db      	asrs	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0306 	and.w	r3, r3, #6
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f063 030e 	orn	r3, r3, #14
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4907      	ldr	r1, [pc, #28]	; (8004314 <I2C_MasterRequestRead+0x198>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f865 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	00010008 	.word	0x00010008
 8004314:	00010002 	.word	0x00010002

08004318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	e025      	b.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d021      	beq.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe fa6f 	bl	8002814 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d116      	bne.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e023      	b.n	80043be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10d      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	43da      	mvns	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	e00c      	b.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	43da      	mvns	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d0b6      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d4:	e051      	b.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e4:	d123      	bne.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e046      	b.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d021      	beq.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fe f9ed 	bl	8002814 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d116      	bne.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e020      	b.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10c      	bne.n	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e00b      	b.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	43da      	mvns	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d18d      	bne.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f8ce 	bl	8004674 <I2C_IsAcknowledgeFailed>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e02d      	b.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d021      	beq.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe f993 	bl	8002814 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e007      	b.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d1ca      	bne.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004552:	e02d      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f88d 	bl	8004674 <I2C_IsAcknowledgeFailed>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e02d      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d021      	beq.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fe f952 	bl	8002814 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e007      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d1ca      	bne.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d4:	e042      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d119      	bne.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0210 	mvn.w	r2, #16
 80045ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e029      	b.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fe f8fc 	bl	8002814 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d1b5      	bne.n	80045d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d11b      	bne.n	80046c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004694:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0204 	orr.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e272      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8087 	beq.w	80047fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f0:	4b92      	ldr	r3, [pc, #584]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d00c      	beq.n	8004716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046fc:	4b8f      	ldr	r3, [pc, #572]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b08      	cmp	r3, #8
 8004706:	d112      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
 8004708:	4b8c      	ldr	r3, [pc, #560]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d10b      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004716:	4b89      	ldr	r3, [pc, #548]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d06c      	beq.n	80047fc <HAL_RCC_OscConfig+0x12c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d168      	bne.n	80047fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e24c      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x76>
 8004738:	4b80      	ldr	r3, [pc, #512]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7f      	ldr	r2, [pc, #508]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e02e      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x98>
 800474e:	4b7b      	ldr	r3, [pc, #492]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7a      	ldr	r2, [pc, #488]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b78      	ldr	r3, [pc, #480]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a77      	ldr	r2, [pc, #476]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0xbc>
 8004772:	4b72      	ldr	r3, [pc, #456]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a71      	ldr	r2, [pc, #452]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6e      	ldr	r2, [pc, #440]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 800478c:	4b6b      	ldr	r3, [pc, #428]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6a      	ldr	r2, [pc, #424]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b68      	ldr	r3, [pc, #416]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a67      	ldr	r2, [pc, #412]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe f832 	bl	8002814 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fe f82e 	bl	8002814 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e200      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b5d      	ldr	r3, [pc, #372]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xe4>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe f81e 	bl	8002814 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fe f81a 	bl	8002814 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1ec      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b53      	ldr	r3, [pc, #332]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x10c>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480a:	4b4c      	ldr	r3, [pc, #304]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004816:	4b49      	ldr	r3, [pc, #292]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b08      	cmp	r3, #8
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x18c>
 8004822:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x176>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1c0      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4939      	ldr	r1, [pc, #228]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b36      	ldr	r3, [pc, #216]	; (8004940 <HAL_RCC_OscConfig+0x270>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd ffd3 	bl	8002814 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7fd ffcf 	bl	8002814 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1a1      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4927      	ldr	r1, [pc, #156]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_RCC_OscConfig+0x270>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd ffb2 	bl	8002814 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fd ffae 	bl	8002814 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e180      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03a      	beq.n	8004954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d019      	beq.n	800491a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_RCC_OscConfig+0x274>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ec:	f7fd ff92 	bl	8002814 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fd ff8e 	bl	8002814 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e160      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004912:	2001      	movs	r0, #1
 8004914:	f000 fad8 	bl	8004ec8 <RCC_Delay>
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCC_OscConfig+0x274>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7fd ff78 	bl	8002814 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004926:	e00f      	b.n	8004948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fd ff74 	bl	8002814 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d908      	bls.n	8004948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e146      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	42420000 	.word	0x42420000
 8004944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	4b92      	ldr	r3, [pc, #584]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e9      	bne.n	8004928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a6 	beq.w	8004aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4b8b      	ldr	r3, [pc, #556]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4a87      	ldr	r2, [pc, #540]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	61d3      	str	r3, [r2, #28]
 800497e:	4b85      	ldr	r3, [pc, #532]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498e:	4b82      	ldr	r3, [pc, #520]	; (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d118      	bne.n	80049cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499a:	4b7f      	ldr	r3, [pc, #508]	; (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7e      	ldr	r2, [pc, #504]	; (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a6:	f7fd ff35 	bl	8002814 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fd ff31 	bl	8002814 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b64      	cmp	r3, #100	; 0x64
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e103      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x312>
 80049d4:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4a6e      	ldr	r2, [pc, #440]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6213      	str	r3, [r2, #32]
 80049e0:	e02d      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x334>
 80049ea:	4b6a      	ldr	r3, [pc, #424]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4a69      	ldr	r2, [pc, #420]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6213      	str	r3, [r2, #32]
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4a66      	ldr	r2, [pc, #408]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	6213      	str	r3, [r2, #32]
 8004a02:	e01c      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d10c      	bne.n	8004a26 <HAL_RCC_OscConfig+0x356>
 8004a0c:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a60      	ldr	r2, [pc, #384]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a12:	f043 0304 	orr.w	r3, r3, #4
 8004a16:	6213      	str	r3, [r2, #32]
 8004a18:	4b5e      	ldr	r3, [pc, #376]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4a5d      	ldr	r2, [pc, #372]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	6213      	str	r3, [r2, #32]
 8004a24:	e00b      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 8004a26:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4a5a      	ldr	r2, [pc, #360]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	6213      	str	r3, [r2, #32]
 8004a32:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4a57      	ldr	r2, [pc, #348]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d015      	beq.n	8004a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a46:	f7fd fee5 	bl	8002814 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd fee1 	bl	8002814 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0b1      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ee      	beq.n	8004a4e <HAL_RCC_OscConfig+0x37e>
 8004a70:	e014      	b.n	8004a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fd fecf 	bl	8002814 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fd fecb 	bl	8002814 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e09b      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a90:	4b40      	ldr	r3, [pc, #256]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ee      	bne.n	8004a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b3c      	ldr	r3, [pc, #240]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8087 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab8:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d061      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d146      	bne.n	8004b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b33      	ldr	r3, [pc, #204]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fe9f 	bl	8002814 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd fe9b 	bl	8002814 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e06d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aec:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d108      	bne.n	8004b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b02:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4921      	ldr	r1, [pc, #132]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b14:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a19      	ldr	r1, [r3, #32]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	430b      	orrs	r3, r1
 8004b26:	491b      	ldr	r1, [pc, #108]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fd fe6f 	bl	8002814 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd fe6b 	bl	8002814 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e03d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x46a>
 8004b58:	e035      	b.n	8004bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fd fe58 	bl	8002814 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fd fe54 	bl	8002814 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e026      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x498>
 8004b86:	e01e      	b.n	8004bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e019      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_OscConfig+0x500>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d0      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d910      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4965      	ldr	r1, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d040      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e073      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06b      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4936      	ldr	r1, [pc, #216]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fda6 	bl	8002814 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ccc:	f7fd fda2 	bl	8002814 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e053      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 020c 	and.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1eb      	bne.n	8004ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d210      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4922      	ldr	r1, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fd04 	bl	8002790 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	08005d94 	.word	0x08005d94
 8004da0:	2000000c 	.word	0x2000000c
 8004da4:	20000010 	.word	0x20000010

08004da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	b490      	push	{r4, r7}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dae:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xac>)
 8004db0:	1d3c      	adds	r4, r7, #4
 8004db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004db8:	f240 2301 	movw	r3, #513	; 0x201
 8004dbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d002      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x46>
 8004de6:	e02b      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004de8:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dea:	623b      	str	r3, [r7, #32]
      break;
 8004dec:	e02b      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	0c9b      	lsrs	r3, r3, #18
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	3328      	adds	r3, #40	; 0x28
 8004df8:	443b      	add	r3, r7
 8004dfa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dfe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d012      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	0c5b      	lsrs	r3, r3, #17
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	3328      	adds	r3, #40	; 0x28
 8004e16:	443b      	add	r3, r7
 8004e18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	e004      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	623b      	str	r3, [r7, #32]
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e42:	623b      	str	r3, [r7, #32]
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	; 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc90      	pop	{r4, r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	08005d84 	.word	0x08005d84
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	007a1200 	.word	0x007a1200
 8004e60:	003d0900 	.word	0x003d0900

08004e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e68:	4b02      	ldr	r3, [pc, #8]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr
 8004e74:	2000000c 	.word	0x2000000c

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff2 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	; (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	08005da4 	.word	0x08005da4

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ea4:	f7ff ffde 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	0adb      	lsrs	r3, r3, #11
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	08005da4 	.word	0x08005da4

08004ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <RCC_Delay+0x34>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <RCC_Delay+0x38>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	0a5b      	lsrs	r3, r3, #9
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ee4:	bf00      	nop
  }
  while (Delay --);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	60fa      	str	r2, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f9      	bne.n	8004ee4 <RCC_Delay+0x1c>
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	2000000c 	.word	0x2000000c
 8004f00:	10624dd3 	.word	0x10624dd3

08004f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03f      	b.n	8004f96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fd fa4c 	bl	80023c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fe41 	bl	8005bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d17c      	bne.n	80050b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_Transmit+0x2c>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e075      	b.n	80050ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Transmit+0x3e>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06e      	b.n	80050ba <HAL_UART_Transmit+0x11c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fd fc0f 	bl	8002814 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500c:	d108      	bne.n	8005020 <HAL_UART_Transmit+0x82>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e003      	b.n	8005028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005030:	e02a      	b.n	8005088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fbb2 	bl	80057a6 <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e036      	b.n	80050ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e007      	b.n	800507a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cf      	bne.n	8005032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fb82 	bl	80057a6 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050b8:	2302      	movs	r3, #2
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d153      	bne.n	8005186 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_UART_Transmit_DMA+0x26>
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e04c      	b.n	8005188 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Transmit_DMA+0x38>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e045      	b.n	8005188 <HAL_UART_Transmit_DMA+0xc4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	; 0x21
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_UART_Transmit_DMA+0xcc>)
 800512a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	4a18      	ldr	r2, [pc, #96]	; (8005194 <HAL_UART_Transmit_DMA+0xd0>)
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <HAL_UART_Transmit_DMA+0xd4>)
 800513a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	2200      	movs	r2, #0
 8005142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005144:	f107 0308 	add.w	r3, r7, #8
 8005148:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3304      	adds	r3, #4
 8005158:	461a      	mov	r2, r3
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	f7fd fcf0 	bl	8002b40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005180:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e000      	b.n	8005188 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	080055d9 	.word	0x080055d9
 8005194:	0800562b 	.word	0x0800562b
 8005198:	08005713 	.word	0x08005713

0800519c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d13c      	bne.n	8005230 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e035      	b.n	8005232 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e02e      	b.n	8005232 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fb27 	bl	800583c <UART_Start_Receive_DMA>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d119      	bne.n	800522c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d113      	bne.n	8005228 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005200:	2300      	movs	r3, #0
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0210 	orr.w	r2, r2, #16
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	e001      	b.n	800522c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	e000      	b.n	8005232 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_UART_IRQHandler+0x52>
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fbf8 	bl	8005a7c <UART_Receive_IT>
      return;
 800528c:	e17b      	b.n	8005586 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80b1 	beq.w	80053f8 <HAL_UART_IRQHandler+0x1bc>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_UART_IRQHandler+0x70>
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80a6 	beq.w	80053f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_UART_IRQHandler+0x90>
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f043 0201 	orr.w	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_UART_IRQHandler+0xb0>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f043 0202 	orr.w	r2, r3, #2
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_UART_IRQHandler+0xd0>
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	f043 0204 	orr.w	r2, r3, #4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00f      	beq.n	8005336 <HAL_UART_IRQHandler+0xfa>
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <HAL_UART_IRQHandler+0xee>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0208 	orr.w	r2, r3, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 811e 	beq.w	800557c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_UART_IRQHandler+0x11e>
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb91 	bl	8005a7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <HAL_UART_IRQHandler+0x146>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d031      	beq.n	80053e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fad3 	bl	800592e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d023      	beq.n	80053de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d013      	beq.n	80053d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	4a76      	ldr	r2, [pc, #472]	; (800558c <HAL_UART_IRQHandler+0x350>)
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fc5a 	bl	8002c74 <HAL_DMA_Abort_IT>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053d0:	4610      	mov	r0, r2
 80053d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	e00e      	b.n	80053f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f8f5 	bl	80055c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e00a      	b.n	80053f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f8f1 	bl	80055c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e006      	b.n	80053f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8ed 	bl	80055c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053f2:	e0c3      	b.n	800557c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	bf00      	nop
    return;
 80053f6:	e0c1      	b.n	800557c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	f040 80a1 	bne.w	8005544 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 809b 	beq.w	8005544 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8095 	beq.w	8005544 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d04e      	beq.n	80054dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005448:	8a3b      	ldrh	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8098 	beq.w	8005580 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005454:	8a3a      	ldrh	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	f080 8092 	bcs.w	8005580 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8a3a      	ldrh	r2, [r7, #16]
 8005460:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b20      	cmp	r3, #32
 800546a:	d02b      	beq.n	80054c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800547a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0210 	bic.w	r2, r2, #16
 80054b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fd fb9d 	bl	8002bfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fa fedb 	bl	8000290 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054da:	e051      	b.n	8005580 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d047      	beq.n	8005584 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80054f4:	8a7b      	ldrh	r3, [r7, #18]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d044      	beq.n	8005584 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005508:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0210 	bic.w	r2, r2, #16
 8005536:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005538:	8a7b      	ldrh	r3, [r7, #18]
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fa fea7 	bl	8000290 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005542:	e01f      	b.n	8005584 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d008      	beq.n	8005560 <HAL_UART_IRQHandler+0x324>
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa28 	bl	80059ae <UART_Transmit_IT>
    return;
 800555e:	e012      	b.n	8005586 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <HAL_UART_IRQHandler+0x34a>
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa69 	bl	8005a4c <UART_EndTransmit_IT>
    return;
 800557a:	e004      	b.n	8005586 <HAL_UART_IRQHandler+0x34a>
    return;
 800557c:	bf00      	nop
 800557e:	e002      	b.n	8005586 <HAL_UART_IRQHandler+0x34a>
      return;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_UART_IRQHandler+0x34a>
      return;
 8005584:	bf00      	nop
  }
}
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	08005987 	.word	0x08005987

08005590 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr

080055a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d113      	bne.n	800561c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005608:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005618:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800561a:	e002      	b.n	8005622 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7fc fb7f 	bl	8001d20 <HAL_UART_TxCpltCallback>
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff ffa9 	bl	8005590 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d12a      	bne.n	80056b8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005676:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005696:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d107      	bne.n	80056b8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0210 	bic.w	r2, r2, #16
 80056b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d106      	bne.n	80056ce <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056c4:	4619      	mov	r1, r3
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7fa fde2 	bl	8000290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056cc:	e002      	b.n	80056d4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff ff67 	bl	80055a2 <HAL_UART_RxCpltCallback>
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d108      	bne.n	8005704 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7fa fdc7 	bl	8000290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005702:	e002      	b.n	800570a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff ff55 	bl	80055b4 <HAL_UART_RxHalfCpltCallback>
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf14      	ite	ne
 8005732:	2301      	movne	r3, #1
 8005734:	2300      	moveq	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b21      	cmp	r3, #33	; 0x21
 8005744:	d108      	bne.n	8005758 <UART_DMAError+0x46>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005752:	68b8      	ldr	r0, [r7, #8]
 8005754:	f000 f8d6 	bl	8005904 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b22      	cmp	r3, #34	; 0x22
 8005778:	d108      	bne.n	800578c <UART_DMAError+0x7a>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005786:	68b8      	ldr	r0, [r7, #8]
 8005788:	f000 f8d1 	bl	800592e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0210 	orr.w	r2, r3, #16
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005798:	68b8      	ldr	r0, [r7, #8]
 800579a:	f7ff ff14 	bl	80055c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b6:	e02c      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d028      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80057c6:	f7fd f825 	bl	8002814 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d21d      	bcs.n	8005812 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	429a      	cmp	r2, r3
 800582e:	d0c3      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2222      	movs	r2, #34	; 0x22
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	4a23      	ldr	r2, [pc, #140]	; (80058f8 <UART_Start_Receive_DMA+0xbc>)
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	4a22      	ldr	r2, [pc, #136]	; (80058fc <UART_Start_Receive_DMA+0xc0>)
 8005872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	4a21      	ldr	r2, [pc, #132]	; (8005900 <UART_Start_Receive_DMA+0xc4>)
 800587a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	2200      	movs	r2, #0
 8005882:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	f7fd f950 	bl	8002b40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	08005647 	.word	0x08005647
 80058fc:	080056dd 	.word	0x080056dd
 8005900:	08005713 	.word	0x08005713

08005904 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800591a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005944:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0210 	bic.w	r2, r2, #16
 800596c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff fe10 	bl	80055c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b21      	cmp	r3, #33	; 0x21
 80059c0:	d13e      	bne.n	8005a40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d114      	bne.n	80059f6 <UART_Transmit_IT+0x48>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d110      	bne.n	80059f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	621a      	str	r2, [r3, #32]
 80059f4:	e008      	b.n	8005a08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	1c59      	adds	r1, r3, #1
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6211      	str	r1, [r2, #32]
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4619      	mov	r1, r3
 8005a16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10f      	bne.n	8005a3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fc f957 	bl	8001d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b22      	cmp	r3, #34	; 0x22
 8005a8e:	f040 8099 	bne.w	8005bc4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d117      	bne.n	8005acc <UART_Receive_IT+0x50>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d113      	bne.n	8005acc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	1c9a      	adds	r2, r3, #2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8005aca:	e026      	b.n	8005b1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	d007      	beq.n	8005af0 <UART_Receive_IT+0x74>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <UART_Receive_IT+0x82>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e008      	b.n	8005b10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4619      	mov	r1, r3
 8005b28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d148      	bne.n	8005bc0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0220 	bic.w	r2, r2, #32
 8005b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d123      	bne.n	8005bb6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0210 	bic.w	r2, r2, #16
 8005b82:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d10a      	bne.n	8005ba8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fa fb6e 	bl	8000290 <HAL_UARTEx_RxEventCallback>
 8005bb4:	e002      	b.n	8005bbc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fcf3 	bl	80055a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e002      	b.n	8005bc6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c0a:	f023 030c 	bic.w	r3, r3, #12
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	430b      	orrs	r3, r1
 8005c16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2c      	ldr	r2, [pc, #176]	; (8005ce4 <UART_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d103      	bne.n	8005c40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7ff f932 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	e002      	b.n	8005c46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7ff f91a 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8005c44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009a      	lsls	r2, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <UART_SetConfig+0x118>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	0119      	lsls	r1, r3, #4
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009a      	lsls	r2, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <UART_SetConfig+0x118>)
 8005c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2064      	movs	r0, #100	; 0x64
 8005c86:	fb00 f303 	mul.w	r3, r0, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	3332      	adds	r3, #50	; 0x32
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <UART_SetConfig+0x118>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c9c:	4419      	add	r1, r3
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009a      	lsls	r2, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <UART_SetConfig+0x118>)
 8005cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2064      	movs	r0, #100	; 0x64
 8005cbe:	fb00 f303 	mul.w	r3, r0, r3
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	3332      	adds	r3, #50	; 0x32
 8005cc8:	4a07      	ldr	r2, [pc, #28]	; (8005ce8 <UART_SetConfig+0x118>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	f003 020f 	and.w	r2, r3, #15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	440a      	add	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40013800 	.word	0x40013800
 8005ce8:	51eb851f 	.word	0x51eb851f

08005cec <__libc_init_array>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	2600      	movs	r6, #0
 8005cf0:	4d0c      	ldr	r5, [pc, #48]	; (8005d24 <__libc_init_array+0x38>)
 8005cf2:	4c0d      	ldr	r4, [pc, #52]	; (8005d28 <__libc_init_array+0x3c>)
 8005cf4:	1b64      	subs	r4, r4, r5
 8005cf6:	10a4      	asrs	r4, r4, #2
 8005cf8:	42a6      	cmp	r6, r4
 8005cfa:	d109      	bne.n	8005d10 <__libc_init_array+0x24>
 8005cfc:	f000 f830 	bl	8005d60 <_init>
 8005d00:	2600      	movs	r6, #0
 8005d02:	4d0a      	ldr	r5, [pc, #40]	; (8005d2c <__libc_init_array+0x40>)
 8005d04:	4c0a      	ldr	r4, [pc, #40]	; (8005d30 <__libc_init_array+0x44>)
 8005d06:	1b64      	subs	r4, r4, r5
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	42a6      	cmp	r6, r4
 8005d0c:	d105      	bne.n	8005d1a <__libc_init_array+0x2e>
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d14:	4798      	blx	r3
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7ee      	b.n	8005cf8 <__libc_init_array+0xc>
 8005d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1e:	4798      	blx	r3
 8005d20:	3601      	adds	r6, #1
 8005d22:	e7f2      	b.n	8005d0a <__libc_init_array+0x1e>
 8005d24:	08005dac 	.word	0x08005dac
 8005d28:	08005dac 	.word	0x08005dac
 8005d2c:	08005dac 	.word	0x08005dac
 8005d30:	08005db0 	.word	0x08005db0

08005d34 <memcpy>:
 8005d34:	440a      	add	r2, r1
 8005d36:	4291      	cmp	r1, r2
 8005d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d3c:	d100      	bne.n	8005d40 <memcpy+0xc>
 8005d3e:	4770      	bx	lr
 8005d40:	b510      	push	{r4, lr}
 8005d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d4c:	d1f9      	bne.n	8005d42 <memcpy+0xe>
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <memset>:
 8005d50:	4603      	mov	r3, r0
 8005d52:	4402      	add	r2, r0
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d100      	bne.n	8005d5a <memset+0xa>
 8005d58:	4770      	bx	lr
 8005d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5e:	e7f9      	b.n	8005d54 <memset+0x4>

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
